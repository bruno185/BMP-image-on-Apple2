------+---------------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
 Line | # File         Line | Line Type   | MX |  Reloc  | Size | Address   Object Code |  Source Code                                                      
------+---------------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
    1 |  1 asmdemo.s      1 | Comment     | 11 |         |    0 | 00/8000               | * * * * * * * * * * * * * * * * * * * * * * * * * * * 
    2 |  1 asmdemo.s      2 | Comment     | 11 |         |    0 | 00/8000               | *                                                   *
    3 |  1 asmdemo.s      3 | Comment     | 11 |         |    0 | 00/8000               | *   Diplay a BMP image using Graphics Primitives    *      
    4 |  1 asmdemo.s      4 | Comment     | 11 |         |    0 | 00/8000               | *                                                   *  
    5 |  1 asmdemo.s      5 | Comment     | 11 |         |    0 | 00/8000               | * * * * * * * * * * * * * * * * * * * * * * * * * * *  
    6 |  1 asmdemo.s      6 | Comment     | 11 |         |    0 | 00/8000               | *
    7 |  1 asmdemo.s      7 | Comment     | 11 |         |    0 | 00/8000               | * BMP is loaded by this program, and tests are performed :
    8 |  1 asmdemo.s      8 | Comment     | 11 |         |    0 | 00/8000               |         * BMP image must have 1 bit per pixel
    9 |  1 asmdemo.s      9 | Comment     | 11 |         |    0 | 00/8000               |         * Dimension must not exceed 280 x 192
   10 |  1 asmdemo.s     10 | Comment     | 11 |         |    0 | 00/8000               |         * Every bit (= pixel) in BMP file is doubled horizontally 
   11 |  1 asmdemo.s     11 | Comment     | 11 |         |    0 | 00/8000               | * to respect image aspect ratio (more or less)
   12 |  1 asmdemo.s     12 | Comment     | 11 |         |    0 | 00/8000               | * The image is drawn line by line, using PaintBits function of Graphics Primitives package
   13 |  1 asmdemo.s     13 | Comment     | 11 |         |    0 | 00/8000               | *
   14 |  1 asmdemo.s     14 | Comment     | 11 |         |    0 | 00/8000               | *
   15 |  1 asmdemo.s     15 | Comment     | 11 |         |    0 | 00/8000               | * Memory :
   16 |  1 asmdemo.s     16 | Comment     | 11 |         |    0 | 00/8000               | * STARTUP (Basic) : $801 
   17 |  1 asmdemo.s     17 | Comment     | 11 |         |    0 | 00/8000               | * Font : $800 : destroy STARTUP !
   18 |  1 asmdemo.s     18 | Comment     | 11 |         |    0 | 00/8000               | * Program : $E00 - $1FFF
   19 |  1 asmdemo.s     19 | Comment     | 11 |         |    0 | 00/8000               | * Screen : $2000 - $3FFF
   20 |  1 asmdemo.s     20 | Comment     | 11 |         |    0 | 00/8000               | * GP Library : $4000 - $5FFF
   21 |  1 asmdemo.s     21 | Comment     | 11 |         |    0 | 00/8000               | * BMP Image : $6000 - $7FFF
   22 |  1 asmdemo.s     22 | Comment     | 11 |         |    0 | 00/8000               | * grafport storage : $8000
   23 |  1 asmdemo.s     23 | Empty       | 11 |         |    0 | 00/8000               |                                                    
   24 |  1 asmdemo.s     24 | Comment     | 11 |         |    0 | 00/8000               | *<sym>
   25 |  1 asmdemo.s     25 | Directive   | 11 |         |    0 | 00/8000               | GP_call              MAC                           ; call to graphic primitives (macro)
   26 |  1 asmdemo.s     26 | Directive   | 11 |         |    0 | 00/8000               |                      jsr      {$4000}              ; graphic primitives only entry point
   27 |  1 asmdemo.s     27 | Directive   | 11 |         |    0 | 00/8000               |                      dfb      ]1                   ; command ID (1 byte)
   28 |  1 asmdemo.s     28 | Directive   | 11 |         |    0 | 00/8000               |                      da       ]2                   ; address of parameter(s) (2 bytes), 0 if no paramter
   29 |  1 asmdemo.s     29 | Directive   | 11 |         |    0 | 00/8000               |                      EOM                           
   30 |  1 asmdemo.s     30 | Empty       | 11 |         |    0 | 00/8000               |                                                    
   31 |  1 asmdemo.s     31 | Directive   | 11 |         |    0 | 00/8000               |                      put      equates              
   32 |  2 equates.s      1 | Comment     | 11 |         |    0 | 00/8000               | ;
   33 |  2 equates.s      2 | Comment     | 11 |         |    0 | 00/8000               | ; equate file for interfacing to toolkit/graphics
   34 |  2 equates.s      3 | Comment     | 11 |         |    0 | 00/8000               | ;
   35 |  2 equates.s      4 | Equivalence | 11 |         |    0 | 00/8000               | ToolMLI              equ      $4000                
   36 |  2 equates.s      5 | Equivalence | 11 |         |    0 | 00/8000               | GrafMLI              equ      $4000                
   37 |  2 equates.s      6 | Comment     | 11 |         |    0 | 00/8000               | ;
   38 |  2 equates.s      7 | Comment     | 11 |         |    0 | 00/8000               | ; constants
   39 |  2 equates.s      8 | Comment     | 11 |         |    0 | 00/8000               | ;
   40 |  2 equates.s      9 | Equivalence | 11 |         |    0 | 00/8000               | SrcCopy              equ      0                    
   41 |  2 equates.s     10 | Equivalence | 11 |         |    0 | 00/8000               | SrcOr                equ      1                    
   42 |  2 equates.s     11 | Equivalence | 11 |         |    0 | 00/8000               | SrcXor               equ      2                    
   43 |  2 equates.s     12 | Equivalence | 11 |         |    0 | 00/8000               | SrcBic               equ      3                    
   44 |  2 equates.s     13 | Equivalence | 11 |         |    0 | 00/8000               | SrcNotCopy           equ      4                    
   45 |  2 equates.s     14 | Equivalence | 11 |         |    0 | 00/8000               | SrcNotOr             equ      5                    
   46 |  2 equates.s     15 | Equivalence | 11 |         |    0 | 00/8000               | SrcNotXor            equ      6                    
   47 |  2 equates.s     16 | Equivalence | 11 |         |    0 | 00/8000               | SrcNotBic            equ      7                    
   48 |  2 equates.s     17 | Comment     | 11 |         |    0 | 00/8000               | ;
   49 |  2 equates.s     18 | Comment     | 11 |         |    0 | 00/8000               | ; grafport structure
   50 |  2 equates.s     19 | Comment     | 11 |         |    0 | 00/8000               | ;
   51 |  2 equates.s     20 | Equivalence | 11 |         |    0 | 00/8000               | viewloc              equ      0                    
   52 |  2 equates.s     21 | Equivalence | 11 |         |    0 | 00/8000               | portbits             equ      {0}+4                
   53 |  2 equates.s     22 | Equivalence | 11 |         |    0 | 00/8000               | portwidth            equ      {{0}+4}+2            ; 1 byte for width, the other is reserved.
   54 |  2 equates.s     23 | Equivalence | 11 |         |    0 | 00/8000               | portrect             equ      {{{0}+4}+2}+2        
   55 |  2 equates.s     24 | Equivalence | 11 |         |    0 | 00/8000               | penpat               equ      {{{{0}+4}+2}+2}+8    
   56 |  2 equates.s     25 | Equivalence | 11 |         |    0 | 00/8000               | penloc               equ      {{{{{0}+4}+2}+2}+8}+10
   57 |  2 equates.s     26 | Equivalence | 11 |         |    0 | 00/8000               | pensize              equ      {{{{{{0}+4}+2}+2}+8}+10}+4
   58 |  2 equates.s     27 | Equivalence | 11 |         |    0 | 00/8000               | penmode              equ      {{{{{{{0}+4}+2}+2}+8}+10}+4}+2
   59 |  2 equates.s     28 | Equivalence | 11 |         |    0 | 00/8000               | txback               equ      {{{{{{{{0}+4}+2}+2}+8}+10}+4}+2}+1
   60 |  2 equates.s     29 | Equivalence | 11 |         |    0 | 00/8000               | txfont               equ      {{{{{{{{{0}+4}+2}+2}+8}+10}+4}+2}+1}+1
   61 |  2 equates.s     30 | Comment     | 11 |         |    0 | 00/8000               | ;
   62 |  2 equates.s     31 | Equivalence | 11 |         |    0 | 00/8000               | portlength           equ      {{{{{{{{{{0}+4}+2}+2}+8}+10}+4}+2}+1}+1}+2
   63 |  2 equates.s     32 | Comment     | 11 |         |    0 | 00/8000               | ;
   64 |  2 equates.s     33 | Comment     | 11 |         |    0 | 00/8000               | ;
   65 |  2 equates.s     34 | Comment     | 11 |         |    0 | 00/8000               | ; command numbers
   66 |  2 equates.s     35 | Comment     | 11 |         |    0 | 00/8000               | ;
   67 |  2 equates.s     36 | Equivalence | 11 |         |    0 | 00/8000               | InitGraf             equ      1                    
   68 |  2 equates.s     37 | Equivalence | 11 |         |    0 | 00/8000               | SetSwitches          equ      {1}+1                
   69 |  2 equates.s     38 | Comment     | 11 |         |    0 | 00/8000               | ;
   70 |  2 equates.s     39 | Equivalence | 11 |         |    0 | 00/8000               | InitPort             equ      {{1}+1}+1            
   71 |  2 equates.s     40 | Equivalence | 11 |         |    0 | 00/8000               | SetPort              equ      {{{1}+1}+1}+1        
   72 |  2 equates.s     41 | Equivalence | 11 |         |    0 | 00/8000               | GetPort              equ      {{{{1}+1}+1}+1}+1    
   73 |  2 equates.s     42 | Equivalence | 11 |         |    0 | 00/8000               | SetPortBits          equ      {{{{{1}+1}+1}+1}+1}+1
   74 |  2 equates.s     43 | Equivalence | 11 |         |    0 | 00/8000               | SetPenMode           equ      {{{{{{1}+1}+1}+1}+1}+1}+1
   75 |  2 equates.s     44 | Equivalence | 11 |         |    0 | 00/8000               | SetPattern           equ      {{{{{{{1}+1}+1}+1}+1}+1}+1}+1
   76 |  2 equates.s     45 | Equivalence | 11 |         |    0 | 00/8000               | SetColorFlags        equ      {{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1
   77 |  2 equates.s     46 | Equivalence | 11 |         |    0 | 00/8000               | SetPenSize           equ      {{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   78 |  2 equates.s     47 | Equivalence | 11 |         |    0 | 00/8000               | SetFont              equ      {{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   79 |  2 equates.s     48 | Equivalence | 11 |         |    0 | 00/8000               | SetTextBG            equ      {{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   80 |  2 equates.s     49 | Comment     | 11 |         |    0 | 00/8000               | ;
   81 |  2 equates.s     50 | Equivalence | 11 |         |    0 | 00/8000               | Move                 equ      {{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   82 |  2 equates.s     51 | Equivalence | 11 |         |    0 | 00/8000               | MoveTo               equ      {{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   83 |  2 equates.s     52 | Equivalence | 11 |         |    0 | 00/8000               | Line                 equ      {{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   84 |  2 equates.s     53 | Equivalence | 11 |         |    0 | 00/8000               | LineTo               equ      {{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   85 |  2 equates.s     54 | Equivalence | 11 |         |    0 | 00/8000               | PaintRect            equ      {{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   86 |  2 equates.s     55 | Equivalence | 11 |         |    0 | 00/8000               | FrameRect            equ      {{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   87 |  2 equates.s     56 | Equivalence | 11 |         |    0 | 00/8000               | InRect               equ      {{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   88 |  2 equates.s     57 | Equivalence | 11 |         |    0 | 00/8000               | PaintBits            equ      {{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   89 |  2 equates.s     58 | Equivalence | 11 |         |    0 | 00/8000               | PaintPoly            equ      {{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   90 |  2 equates.s     59 | Equivalence | 11 |         |    0 | 00/8000               | FramePoly            equ      {{{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   91 |  2 equates.s     60 | Equivalence | 11 |         |    0 | 00/8000               | InPoly               equ      {{{{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   92 |  2 equates.s     61 | Comment     | 11 |         |    0 | 00/8000               | ;
   93 |  2 equates.s     62 | Equivalence | 11 |         |    0 | 00/8000               | TextWidth            equ      {{{{{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   94 |  2 equates.s     63 | Equivalence | 11 |         |    0 | 00/8000               | DrawText             equ      {{{{{{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   95 |  2 equates.s     64 | Comment     | 11 |         |    0 | 00/8000               | ;
   96 |  2 equates.s     65 | Equivalence | 11 |         |    0 | 00/8000               | SetZP1               equ      {{{{{{{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   97 |  2 equates.s     66 | Equivalence | 11 |         |    0 | 00/8000               | SetZP2               equ      {{{{{{{{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   98 |  2 equates.s     67 | Equivalence | 11 |         |    0 | 00/8000               | GetVersion           equ      {{{{{{{{{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1
   99 |  2 equates.s     68 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  100 |  2 equates.s     69 | Comment     | 11 |         |    0 | 00/8000               | ; DATA STRUCTURES
  101 |  2 equates.s     70 | Comment     | 11 |         |    0 | 00/8000               | ;
  102 |  2 equates.s     71 | Comment     | 11 |         |    0 | 00/8000               | ; The following data structures are defined as types (Pascal format):
  103 |  2 equates.s     72 | Comment     | 11 |         |    0 | 00/8000               |     ; byte = 0..255;
  104 |  2 equates.s     73 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  105 |  2 equates.s     74 | Comment     | 11 |         |    0 | 00/8000               |     ; bits = packed array (0..7) of boolean;
  106 |  2 equates.s     75 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  107 |  2 equates.s     76 | Comment     | 11 |         |    0 | 00/8000               |     ; pmode = (penCopy, penOr, penXor, penBic, notpenCopy, notpenOr, notpenXor, notpenBic);
  108 |  2 equates.s     77 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  109 |  2 equates.s     78 | Comment     | 11 |         |    0 | 00/8000               |     ; point = record
  110 |  2 equates.s     79 | Comment     | 11 |         |    0 | 00/8000               |         ; x: integer;
  111 |  2 equates.s     80 | Comment     | 11 |         |    0 | 00/8000               |         ; y: integer;
  112 |  2 equates.s     81 | Comment     | 11 |         |    0 | 00/8000               |     ; end;
  113 |  2 equates.s     82 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  114 |  2 equates.s     83 | Comment     | 11 |         |    0 | 00/8000               |     ; rect = record
  115 |  2 equates.s     84 | Comment     | 11 |         |    0 | 00/8000               |         ; case integer of
  116 |  2 equates.s     85 | Comment     | 11 |         |    0 | 00/8000               |         ; 0: (left: integer; top: integer; right: integer; bottom: integer);
  117 |  2 equates.s     86 | Comment     | 11 |         |    0 | 00/8000               |         ; 1: (topleft: point; botright: point);
  118 |  2 equates.s     87 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  119 |  2 equates.s     88 | Comment     | 11 |         |    0 | 00/8000               |     ; maplnfo = packed record
  120 |  2 equates.s     89 | Comment     | 11 |         |    0 | 00/8000               |         ; viewloc: point;
  121 |  2 equates.s     90 | Comment     | 11 |         |    0 | 00/8000               |         ; mspbits: pointer;
  122 |  2 equates.s     91 | Comment     | 11 |         |    0 | 00/8000               |         ; mspwidth: byte;
  123 |  2 equates.s     92 | Comment     | 11 |         |    0 | 00/8000               |         ; reserved: byte;
  124 |  2 equates.s     93 | Comment     | 11 |         |    0 | 00/8000               |         ; maprect: rect;
  125 |  2 equates.s     94 | Comment     | 11 |         |    0 | 00/8000               |     ; end;
  126 |  2 equates.s     95 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  127 |  2 equates.s     96 | Comment     | 11 |         |    0 | 00/8000               |     ; pattern = packed array [1..9] of byte;                ; 1..8 ???
  128 |  2 equates.s     97 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  129 |  2 equates.s     98 | Comment     | 11 |         |    0 | 00/8000               |     ; maskinfo = packed record
  130 |  2 equates.s     99 | Comment     | 11 |         |    0 | 00/8000               |         ; ANDmask: byte;
  131 |  2 equates.s    100 | Comment     | 11 |         |    0 | 00/8000               |         ; ORmask: byte;
  132 |  2 equates.s    101 | Comment     | 11 |         |    0 | 00/8000               |     ; end;
  133 |  2 equates.s    102 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  134 |  2 equates.s    103 | Comment     | 11 |         |    0 | 00/8000               |     ; GrafPort = packed record
  135 |  2 equates.s    104 | Comment     | 11 |         |    0 | 00/8000               |         ; portmap: maplnfo;
  136 |  2 equates.s    105 | Comment     | 11 |         |    0 | 00/8000               |         ; penpattern: pattern;
  137 |  2 equates.s    106 | Comment     | 11 |         |    0 | 00/8000               |         ; colormasks: maskinfo;
  138 |  2 equates.s    107 | Comment     | 11 |         |    0 | 00/8000               |         ; penloc: point;
  139 |  2 equates.s    108 | Comment     | 11 |         |    0 | 00/8000               |         ; penwidth: byte;
  140 |  2 equates.s    109 | Comment     | 11 |         |    0 | 00/8000               |         ; penheight: byte;
  141 |  2 equates.s    110 | Comment     | 11 |         |    0 | 00/8000               |         ; penmode: pmode;
  142 |  2 equates.s    111 | Comment     | 11 |         |    0 | 00/8000               |         ; reserved: 0..31;
  143 |  2 equates.s    112 | Comment     | 11 |         |    0 | 00/8000               |         ; textback: byte;
  144 |  2 equates.s    113 | Comment     | 11 |         |    0 | 00/8000               |         ; textfont: integer;
  145 |  2 equates.s    114 | Comment     | 11 |         |    0 | 00/8000               |     ; end;
  146 |  2 equates.s    115 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  147 |  1 asmdemo.s     32 | Directive   | 11 |         |    0 | 00/8000               |                      put      equ                  
  148 |  3     equ.s      1 | Comment     | 11 |         |    0 | 00/8000               | ************ ROM routines ************ 
  149 |  3     equ.s      2 | Equivalence | 11 |         |    0 | 00/8000               | home                 equ      $FC58                ; clear text screen, reset margins
  150 |  3     equ.s      3 | Equivalence | 11 |         |    0 | 00/8000               | text                 equ      $FB2F                ; text mode
  151 |  3     equ.s      4 | Equivalence | 11 |         |    0 | 00/8000               | Bell                 equ      $FBDD                ; play a sound
  152 |  3     equ.s      5 | Equivalence | 11 |         |    0 | 00/8000               | cout                 equ      $FDED                ; print char in A
  153 |  3     equ.s      6 | Equivalence | 11 |         |    0 | 00/8000               | vtab                 equ      $FC22                ; vert. tab, value must be in CV ($25)
  154 |  3     equ.s      7 | Equivalence | 11 |         |    0 | 00/8000               | getln                equ      $FD6A                ; read line of input (=> X = length, buffer = $200)
  155 |  3     equ.s      8 | Equivalence | 11 |         |    0 | 00/8000               | getlnz               equ      $FD67                ; = return + getln
  156 |  3     equ.s      9 | Equivalence | 11 |         |    0 | 00/8000               | getln1               equ      $FD6F                ; = getln without prompt
  157 |  3     equ.s     10 | Equivalence | 11 |         |    0 | 00/8000               | bascalc              equ      $FBC1                ; calc. address of line in A, put address in $28/$29
  158 |  3     equ.s     11 | Equivalence | 11 |         |    0 | 00/8000               | crout                equ      $FD8E                ; print carriage return
  159 |  3     equ.s     12 | Equivalence | 11 |         |    0 | 00/8000               | clreop               equ      $FC42                ; clear from cursor to end of page
  160 |  3     equ.s     13 | Equivalence | 11 |         |    0 | 00/8000               | clreol               equ      $FC9C                ; clear from cursor to end of line
  161 |  3     equ.s     14 | Equivalence | 11 |         |    0 | 00/8000               | prntx                equ      $F944                ; prints X in hex (2 digits)
  162 |  3     equ.s     15 | Equivalence | 11 |         |    0 | 00/8000               | prbyte               equ      $FDDA                ; prints A in hex (2 digits)
  163 |  3     equ.s     16 | Equivalence | 11 |         |    0 | 00/8000               | printax              equ      $F941                ; Prints current contents of the A and X in hex
  164 |  3     equ.s     17 | Equivalence | 11 |         |    0 | 00/8000               | prntyx               equ      $F940                ; Prints current contents of the Y and X in hex
  165 |  3     equ.s     18 | Equivalence | 11 |         |    0 | 00/8000               | rdkey                equ      $FD0C                ; wait for keypress
  166 |  3     equ.s     19 | Equivalence | 11 |         |    0 | 00/8000               | wait                 equ      $FCA8                ; monitor delay
  167 |  3     equ.s     20 | Equivalence | 11 |         |    0 | 00/8000               | AUXMOV               equ      $C311                
  168 |  3     equ.s     21 | Equivalence | 11 |         |    0 | 00/8000               | OUTPORT              equ      $FE95                
  169 |  3     equ.s     22 | Equivalence | 11 |         |    0 | 00/8000               | prnxy                equ      $F940                
  170 |  3     equ.s     23 | Equivalence | 11 |         |    0 | 00/8000               | normal               equ      $FE84                ; Set normal video mode (white on black)
  171 |  3     equ.s     24 | Equivalence | 11 |         |    0 | 00/8000               | pr0                  equ      $fe93                ; SETVID (= PR#0)
  172 |  3     equ.s     25 | Equivalence | 11 |         |    0 | 00/8000               | in0                  equ      $fe89                ; SETKBD (= IN#0)
  173 |  3     equ.s     26 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  174 |  3     equ.s     27 | Comment     | 11 |         |    0 | 00/8000               | *
  175 |  3     equ.s     28 | Comment     | 11 |         |    0 | 00/8000               | ************ ROM switches ************  
  176 |  3     equ.s     29 | Equivalence | 11 |         |    0 | 00/8000               | STORE80OFF           equ      $C000                ; disable 80-column store
  177 |  3     equ.s     30 | Equivalence | 11 |         |    0 | 00/8000               | STORE80ON            equ      $C001                ; enable 80-column store
  178 |  3     equ.s     31 | Equivalence | 11 |         |    0 | 00/8000               | RAMRDOFF             equ      $C002                ; read main
  179 |  3     equ.s     32 | Equivalence | 11 |         |    0 | 00/8000               | RAMRDON              equ      $C003                ; read aux
  180 |  3     equ.s     33 | Equivalence | 11 |         |    0 | 00/8000               | RAMWRTOFF            equ      $C004                ; write to main
  181 |  3     equ.s     34 | Equivalence | 11 |         |    0 | 00/8000               | RAMWRTON             equ      $C005                ; write to aux
  182 |  3     equ.s     35 | Equivalence | 11 |         |    0 | 00/8000               | ALTCHARSET0FF        equ      $C00E                
  183 |  3     equ.s     36 | Equivalence | 11 |         |    0 | 00/8000               | ALTCHARSET0N         equ      $C00F                
  184 |  3     equ.s     37 | Equivalence | 11 |         |    0 | 00/8000               | kbd                  equ      $C000                ; ascii code of last key pressed (+ 128 if strobe not cleared)
  185 |  3     equ.s     38 | Equivalence | 11 |         |    0 | 00/8000               | kbdstrb              equ      $C010                
  186 |  3     equ.s     39 | Equivalence | 11 |         |    0 | 00/8000               | col80off             equ      $C00C                
  187 |  3     equ.s     40 | Equivalence | 11 |         |    0 | 00/8000               | col80on              equ      $C00D                
  188 |  3     equ.s     41 | Equivalence | 11 |         |    0 | 00/8000               | 80col                equ      $C01F                
  189 |  3     equ.s     42 | Comment     | 11 |         |    0 | 00/8000               | *
  190 |  3     equ.s     43 | Comment     | 11 |         |    0 | 00/8000               | ************ page 0 ************  
  191 |  3     equ.s     44 | Equivalence | 11 |         |    0 | 00/8000               | cv                   equ      $25                  
  192 |  3     equ.s     45 | Equivalence | 11 |         |    0 | 00/8000               | ch                   equ      $24                  
  193 |  3     equ.s     46 | Equivalence | 11 |         |    0 | 00/8000               | basl                 equ      $28                  
  194 |  3     equ.s     47 | Equivalence | 11 |         |    0 | 00/8000               | wndlft               equ      $20                  
  195 |  3     equ.s     48 | Equivalence | 11 |         |    0 | 00/8000               | wndwdth              equ      $21                  
  196 |  3     equ.s     49 | Equivalence | 11 |         |    0 | 00/8000               | wndtop               equ      $22                  ; Top Margin (0 - 23, 0 is default, 20 in graphics mode)
  197 |  3     equ.s     50 | Equivalence | 11 |         |    0 | 00/8000               | wndbtm               equ      $23                  
  198 |  3     equ.s     51 | Equivalence | 11 |         |    0 | 00/8000               | prompt               equ      $33                  
  199 |  3     equ.s     52 | Comment     | 11 |         |    0 | 00/8000               | *
  200 |  3     equ.s     53 | Equivalence | 11 |         |    0 | 00/8000               | ourch                equ      $57B                 ; Cursor's column position minus 1 (HTAB's place) in 80-column mode
  201 |  3     equ.s     54 | Equivalence | 11 |         |    0 | 00/8000               | ourcv                equ      $5FB                 ; 80 col vertical pos
  202 |  3     equ.s     55 | Comment     | 11 |         |    0 | 00/8000               | *
  203 |  3     equ.s     56 | Comment     | 11 |         |    0 | 00/8000               | ************ ProDOS ************ 
  204 |  3     equ.s     57 | Equivalence | 11 |         |    0 | 00/8000               | GETBUFR              equ      $bef5                
  205 |  3     equ.s     58 | Equivalence | 11 |         |    0 | 00/8000               | FREEBUFR             equ      $BEF8                
  206 |  3     equ.s     59 | Equivalence | 11 |         |    0 | 00/8000               | devnum               equ      $BF30                ; last used device here, format : DSSS0000
  207 |  3     equ.s     60 | Equivalence | 11 |         |    0 | 00/8000               | RSHIMEM              equ      $BEFB                
  208 |  3     equ.s     61 | Comment     | 11 |         |    0 | 00/8000               | *
  209 |  3     equ.s     62 | Comment     | 11 |         |    0 | 00/8000               | ************ MLI calls (ProDOS) ************
  210 |  3     equ.s     63 | Equivalence | 11 |         |    0 | 00/8000               | MLI                  equ      $BF00                
  211 |  3     equ.s     64 | Equivalence | 11 |         |    0 | 00/8000               | create               equ      $C0                  
  212 |  3     equ.s     65 | Equivalence | 11 |         |    0 | 00/8000               | destroy              equ      $C1                  
  213 |  3     equ.s     66 | Equivalence | 11 |         |    0 | 00/8000               | online               equ      $C5                  
  214 |  3     equ.s     67 | Equivalence | 11 |         |    0 | 00/8000               | getprefix            equ      $c7                  
  215 |  3     equ.s     68 | Equivalence | 11 |         |    0 | 00/8000               | setprefix            equ      $c6                  
  216 |  3     equ.s     69 | Equivalence | 11 |         |    0 | 00/8000               | open                 equ      $C8                  
  217 |  3     equ.s     70 | Equivalence | 11 |         |    0 | 00/8000               | close                equ      $CC                  
  218 |  3     equ.s     71 | Equivalence | 11 |         |    0 | 00/8000               | read                 equ      $CA                  
  219 |  3     equ.s     72 | Equivalence | 11 |         |    0 | 00/8000               | write                equ      $CB                  
  220 |  3     equ.s     73 | Equivalence | 11 |         |    0 | 00/8000               | setmark              equ      $ce                  
  221 |  3     equ.s     74 | Equivalence | 11 |         |    0 | 00/8000               | geteof               equ      $d1                  
  222 |  3     equ.s     75 | Equivalence | 11 |         |    0 | 00/8000               | quit                 equ      $65                  
  223 |  3     equ.s     76 | Comment     | 11 |         |    0 | 00/8000               | *
  224 |  3     equ.s     77 | Comment     | 11 |         |    0 | 00/8000               | ************ FP routines ************
  225 |  3     equ.s     78 | Equivalence | 11 |         |    0 | 00/8000               | float                equ      $E2F2                ; Converts SIGNED integer in A/Y (high/lo) into FAC
  226 |  3     equ.s     79 | Equivalence | 11 |         |    0 | 00/8000               | GIVAYF               equ      $E2F2                ; idem
  227 |  3     equ.s     80 | Equivalence | 11 |         |    0 | 00/8000               | FLOAT2               equ      $EBA0                ; "Float2" entry point (https://6502disassembly.com/a2-rom/Applesoft.html#SymLDAB7)
  228 |  3     equ.s     81 | Comment     | 11 |         |    0 | 00/8000               |                                 ; Float UNSIGNED value in FAC+1,2 (hi,low)
  229 |  3     equ.s     82 | Comment     | 11 |         |    0 | 00/8000               |                                 ; X-reg = exponent ; C=0 to make value negative, C=1 to make value positive
  230 |  3     equ.s     83 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  231 |  3     equ.s     84 | Equivalence | 11 |         |    0 | 00/8000               | PRNTFAC              equ      $ED2E                ; Prints number in FAC (in decimal format). FAC is destroyed
  232 |  3     equ.s     85 | Equivalence | 11 |         |    0 | 00/8000               | FIN                  equ      $EC4A                ; FAC = expression pointed TXTPTR
  233 |  3     equ.s     86 | Equivalence | 11 |         |    0 | 00/8000               | FNEG                 equ      $EED0                ; FAC = - FAC
  234 |  3     equ.s     87 | Equivalence | 11 |         |    0 | 00/8000               | FABS                 equ      $EBAF                ; FAC = ABS(FAC)
  235 |  3     equ.s     88 | Equivalence | 11 |         |    0 | 00/8000               | F2INT16              equ      $E752                ; FAC to 16 bits int in A/Y and $50/51 (low/high)
  236 |  3     equ.s     89 | Equivalence | 11 |         |    0 | 00/8000               | FADD                 equ      $E7BE                ; FAC = FAC + ARG
  237 |  3     equ.s     90 | Equivalence | 11 |         |    0 | 00/8000               | FSUBT                equ      $E7AA                ; FAC = FAC - ARG
  238 |  3     equ.s     91 | Equivalence | 11 |         |    0 | 00/8000               | FMULT                equ      $E97F                ; Move the number pointed by Y,A into ARG and fall into FMULTT
  239 |  3     equ.s     92 | Equivalence | 11 |         |    0 | 00/8000               | FMULTT               equ      $E982                ; FAC = FAC x ARG
  240 |  3     equ.s     93 | Equivalence | 11 |         |    0 | 00/8000               | FDIVT                equ      $EA69                ; FAC = FAC / ARG
  241 |  3     equ.s     94 | Equivalence | 11 |         |    0 | 00/8000               | RND                  equ      $EFAE                ; FAC = random number
  242 |  3     equ.s     95 | Equivalence | 11 |         |    0 | 00/8000               | FOUT                 equ      $ED34                ; Create a string at the start of the stack ($100−$110)
  243 |  3     equ.s     96 | Equivalence | 11 |         |    0 | 00/8000               | MOVAF                equ      $EB63                ; Move FAC into ARG. On exit A=FACEXP and Z is set
  244 |  3     equ.s     97 | Equivalence | 11 |         |    0 | 00/8000               | CONINT               equ      $E6FB                ; Convert FAC into a single byte number in X and FACLO
  245 |  3     equ.s     98 | Equivalence | 11 |         |    0 | 00/8000               | YTOFAC               equ      $E301                ; Float y
  246 |  3     equ.s     99 | Equivalence | 11 |         |    0 | 00/8000               | MOVMF                equ      $EB2B                ; Routine to pack FP number. Address of destination must be in Y
  247 |  3     equ.s    100 | Comment     | 11 |         |    0 | 00/8000               |                                 ; (high) and X (low). Result is packed from FAC                             
  248 |  3     equ.s    101 | Equivalence | 11 |         |    0 | 00/8000               | QUINT                equ      $EBF2                ; convert fac to 16bit INT at $A0 and $A1 (fac+3/fac+4)
  249 |  3     equ.s    102 | Equivalence | 11 |         |    0 | 00/8000               | STROUT               equ      $DB3A                ;
  250 |  3     equ.s    103 | Equivalence | 11 |         |    0 | 00/8000               | LINPRT               equ      $ED24                ; Converts the unsigned hexadecimal number in X (low) and A (high) into a decimal number and displays it.
  251 |  3     equ.s    104 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  252 |  3     equ.s    105 | Comment     | 11 |         |    0 | 00/8000               | * A intégrer :
  253 |  3     equ.s    106 | Comment     | 11 |         |    0 | 00/8000               | *FSUB = $E7A7    OVERFLOW = $E8D5        ONE = $E913        FLOG = $E941    CONUPK = $E9E3  MUL10 = $EA39 
  254 |  3     equ.s    107 | Comment     | 11 |         |    0 | 00/8000               | * FDIV = $EA66        DIVERR = $EAE1        MOVFM = $EAF9    FLOAT = $EB93        FCOMP = $EBB2      
  255 |  3     equ.s    108 | Comment     | 11 |         |    0 | 00/8000               | * FINT = $EC23   SQR = $EE8D        FPWRT = $EE9    FEXP = $EF09      FCOS = $EFEA    FSIN = $EFF1  FTAN = $F03A 
  256 |  3     equ.s    109 | Comment     | 11 |         |    0 | 00/8000               | * PIHALF = $F066   FATN = $F09E        
  257 |  3     equ.s    110 | Comment     | 11 |         |    0 | 00/8000               | *
  258 |  3     equ.s    111 | Comment     | 11 |         |    0 | 00/8000               | ************ Applesoft BASIC ************
  259 |  3     equ.s    112 | Equivalence | 11 |         |    0 | 00/8000               | TXTTAB               equ      $67                  ; $67/$68 address of beginning of BASIC Program ($0801 is default)
  260 |  3     equ.s    113 | Equivalence | 11 |         |    0 | 00/8000               | PRGEND               equ      $AF                  ; $AF/$B0 address of end of Applesoft program plus 1 or 2 of BASIC
  261 |  3     equ.s    114 | Equivalence | 11 |         |    0 | 00/8000               | VARTAB               equ      $69                  ; $69/$6A address of beginning of simple variables, just after Basic prog. (unless modified by LOMEN)
  262 |  3     equ.s    115 | Equivalence | 11 |         |    0 | 00/8000               | ARYTAB               equ      $6B                  ; $6B/$6C addresse of beginning of array variables, just after simple variables
  263 |  3     equ.s    116 | Equivalence | 11 |         |    0 | 00/8000               | STREND               equ      $6D                  ; $6D/$6E addresse of end of array variables
  264 |  3     equ.s    117 | Equivalence | 11 |         |    0 | 00/8000               | MEMSIZ               equ      $73                  ; $73/$74 : top of string data, set by HIMEM: (usually $9600),
  265 |  3     equ.s    118 | Equivalence | 11 |         |    0 | 00/8000               | FRETOP               equ      $6F                  ; $6F/$70 bottom of string data, growing downwards
  266 |  3     equ.s    119 | Equivalence | 11 |         |    0 | 00/8000               | CHRGOT               equ      $B7                  ; get char pointed by TXTPTR in A
  267 |  3     equ.s    120 | Equivalence | 11 |         |    0 | 00/8000               | CHRGET               equ      $B1                  ; advance TXTPRT and read char
  268 |  3     equ.s    121 | Equivalence | 11 |         |    0 | 00/8000               | TXTPTR               equ      $B8                  ; pointer $B8/$B9 used in chrget and chrgot
  269 |  3     equ.s    122 | Equivalence | 11 |         |    0 | 00/8000               | CHKCOM               equ      $DEBE                ; check for comma and move TXTPTR forward
  270 |  3     equ.s    123 | Equivalence | 11 |         |    0 | 00/8000               | FRMNUM               equ      $DD67                ; eval num. value, variable, expression pointed by TXTPTR, advance TXTPTR
  271 |  3     equ.s    124 | Equivalence | 11 |         |    0 | 00/8000               | GETADR               equ      $E752                ; convert FAC to integer (to Y,A)
  272 |  3     equ.s    125 | Equivalence | 11 |         |    0 | 00/8000               | FRMEVL               equ      $DD7B                ; evaluate any expression, result in FAC.
  273 |  3     equ.s    126 | Equivalence | 11 |         |    0 | 00/8000               | FRESTR               equ      $E5FD                ; check if epression is a string. A = length, pointer in $5E/$5F
  274 |  3     equ.s    127 | Equivalence | 11 |         |    0 | 00/8000               | ERRDIR               equ      $E306                ; illegal direct if not running
  275 |  3     equ.s    128 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  276 |  3     equ.s    129 | Equivalence | 11 |         |    0 | 00/8000               | PTRGET               equ      $DFE3                ; On entry, TXTPTR must be pointing to the first character of the variable's name.
  277 |  3     equ.s    130 | Comment     | 11 |         |    0 | 00/8000               | * finds an Applesoft variable's memory address and puts a pointer to it in VARPNT ($83-$84) and in A/Y (low/hi). 
  278 |  3     equ.s    131 | Comment     | 11 |         |    0 | 00/8000               | * The variable's name is left in VARNAM ($81-$82). It will work with any type of variable (integer, array element, string..)
  279 |  3     equ.s    132 | Comment     | 11 |         |    0 | 00/8000               | * If the variable does not already exist, PTRGET will create it for you
  280 |  3     equ.s    133 | Comment     | 11 |         |    0 | 00/8000               | * Advances TXTPTR.
  281 |  3     equ.s    134 | Comment     | 11 |         |    0 | 00/8000               | * Set : vartype equ $11 ; str$=$ff, num=$00 
  282 |  3     equ.s    135 | Comment     | 11 |         |    0 | 00/8000               | * set : numtype equ $12 ; int =$80, real = $00
  283 |  3     equ.s    136 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  284 |  3     equ.s    137 | Equivalence | 11 |         |    0 | 00/8000               | CHKNUM               equ      $DD6A                ; verifies that the most recent var found by PTRGET was numeric.
  285 |  3     equ.s    138 | Comment     | 11 |         |    0 | 00/8000               |  *  https://www.brutaldeluxe.fr/documentation/thesourcerorsapprentice/thesourcerorsapprentice_v1n1.pdf
  286 |  3     equ.s    139 | Comment     | 11 |         |    0 | 00/8000               |  * Type mismatch error if var not numeric
  287 |  3     equ.s    140 | Empty       | 11 |         |    0 | 00/8000               |                                                    
  288 |  1 asmdemo.s     33 | Comment     | 11 |         |    0 | 00/8000               |                               ; loading address of "TEST.FONT" file
  289 |  1 asmdemo.s     34 | Comment     | 11 |         |    0 | 00/8000               | *<sym>
  290 |  1 asmdemo.s     35 | Equivalence | 11 |         |    0 | 00/8000               | ptr                  equ      $06                  
  291 |  1 asmdemo.s     36 | Comment     | 11 |         |    0 | 00/8000               | *
  292 |  1 asmdemo.s     37 | Comment     | 11 |         |    0 | 00/8000               | **************************** MAIN PROGRAM ****************************
  293 |  1 asmdemo.s     38 | Comment     | 11 |         |    0 | 00/8000               | *
  294 |  1 asmdemo.s     39 | Directive   | 11 |         |    0 | 00/8000               |                      org      $E00                 
  295 |  1 asmdemo.s     40 | Empty       | 11 |         |    0 | 00/0E00               |                                                    
  296 |  1 asmdemo.s     41 | Code        | 11 |         |    2 | 00/0E00 : A9 04       |                      lda      #4                   ; get 4 pages for 1024 file buffer
  297 |  1 asmdemo.s     42 | Code        | 11 |         |    3 | 00/0E02 : 20 F5 BE    |                      jsr      {$bef5}              ; needed by MLI OPEN
  298 |  1 asmdemo.s     43 | Code        | 11 |         |    2 | 00/0E05 : 90 03       |                      bcc      GetbufOK             ; carry clear means no error in the following code
  299 |  1 asmdemo.s     44 | Code        | 11 |         |    3 | 00/0E07 : 4C 04 0F    |                      jmp      dataerr              ; carry set means error
  300 |  1 asmdemo.s     45 | Empty       | 11 |         |    0 | 00/0E0A               |                                                    
  301 |  1 asmdemo.s     46 | Comment     | 11 |         |    0 | 00/0E0A               | *<sym>
  302 |  1 asmdemo.s     47 | Empty       | 11 |         |    0 | 00/0E0A               | GetbufOK                                           
  303 |  1 asmdemo.s     48 | Code        | 11 |         |    3 | 00/0E0A : 8D 95 12    |                      sta      fbuff+1              ; set file buffer for OPEN param
  304 |  1 asmdemo.s     49 | Code        | 11 |         |    3 | 00/0E0D : 20 3C 12    |                      jsr      doprefix             ; set prefix
  305 |  1 asmdemo.s     50 | Code        | 11 |         |    2 | 00/0E10 : 90 03       |                      bcc      doprefixOK           
  306 |  1 asmdemo.s     51 | Code        | 11 |         |    3 | 00/0E12 : 4C 04 0F    |                      jmp      dataerr              
  307 |  1 asmdemo.s     52 | Comment     | 11 |         |    0 | 00/0E15               | *<sym>
  308 |  1 asmdemo.s     53 | Empty       | 11 |         |    0 | 00/0E15               | doprefixOK                                         
  309 |  1 asmdemo.s     54 | Empty       | 11 |         |    0 | 00/0E15               |                                                    
  310 |  1 asmdemo.s     55 | Code        | 11 |         |    3 | 00/0E15 : 20 70 11    |                      jsr      openBMP              ; open and load BMP file in memory
  311 |  1 asmdemo.s     56 | Code        | 11 |         |    2 | 00/0E18 : 90 03       |                      bcc      BMPok                
  312 |  1 asmdemo.s     57 | Code        | 11 |         |    3 | 00/0E1A : 4C 04 0F    |                      jmp      dataerr              ; exit with error
  313 |  1 asmdemo.s     58 | Comment     | 11 |         |    0 | 00/0E1D               | *<sym>
  314 |  1 asmdemo.s     59 | Empty       | 11 |         |    0 | 00/0E1D               | BMPok                                              
  315 |  1 asmdemo.s     60 | Code        | 11 |         |    3 | 00/0E1D : 20 4E 0E    |                      jsr      DoHeader             ; check header of BMP file in memory
  316 |  1 asmdemo.s     61 | Code        | 11 |         |    2 | 00/0E20 : 90 03       |                      bcc      headerOK             ; exit on error if carry set
  317 |  1 asmdemo.s     62 | Code        | 11 |         |    3 | 00/0E22 : 4C 04 0F    |                      jmp      dataerr              ; exit with error
  318 |  1 asmdemo.s     63 | Comment     | 11 |         |    0 | 00/0E25               | *<sym>
  319 |  1 asmdemo.s     64 | Empty       | 11 |         |    0 | 00/0E25               | headerOK                                           
  320 |  1 asmdemo.s     65 | Macro       | 11 |         |    0 | 00/0E25               |                      GP_call  {1};0                ; go dhgr using Graphics Primitives library
  321 |  1 asmdemo.s     65 | Code        | 11 |         |    3 | 00/0E25 : 20 00 40    |                      jsr      {$4000}              ; graphic primitives only entry point
  322 |  1 asmdemo.s     65 | Data        | 11 |         |    1 | 00/0E28 : 01          |                      dfb      {1}                  ; command ID (1 byte)
  323 |  1 asmdemo.s     65 | Data        | 11 |         |    2 | 00/0E29 : 00 00       |                      da       0                    ; address of parameter(s) (2 bytes), 0 if no paramter
  324 |  1 asmdemo.s     66 | Macro       | 11 |         |    0 | 00/0E2B               |                      GP_call  {{{1}+1}+1};MyPort   
  325 |  1 asmdemo.s     66 | Code        | 11 |         |    3 | 00/0E2B : 20 00 40    |                      jsr      {$4000}              ; graphic primitives only entry point
  326 |  1 asmdemo.s     66 | Data        | 11 |         |    1 | 00/0E2E : 03          |                      dfb      {{{1}+1}+1}          ; command ID (1 byte)
  327 |  1 asmdemo.s     66 | Data        | 11 |         |    2 | 00/0E2F : 19 0F       |                      da       MyPort               ; address of parameter(s) (2 bytes), 0 if no paramter
  328 |  1 asmdemo.s     67 | Macro       | 11 |         |    0 | 00/0E31               |                      GP_call  {{{{1}+1}+1}+1};MyPort
  329 |  1 asmdemo.s     67 | Code        | 11 |         |    3 | 00/0E31 : 20 00 40    |                      jsr      {$4000}              ; graphic primitives only entry point
  330 |  1 asmdemo.s     67 | Data        | 11 |         |    1 | 00/0E34 : 04          |                      dfb      {{{{1}+1}+1}+1}      ; command ID (1 byte)
  331 |  1 asmdemo.s     67 | Data        | 11 |         |    2 | 00/0E35 : 19 0F       |                      da       MyPort               ; address of parameter(s) (2 bytes), 0 if no paramter
  332 |  1 asmdemo.s     68 | Comment     | 11 |         |    0 | 00/0E37               | *<sym>
  333 |  1 asmdemo.s     69 | Empty       | 11 |         |    0 | 00/0E37               | startimage                                         
  334 |  1 asmdemo.s     70 | Code        | 11 |         |    3 | 00/0E37 : 20 BF 0F    |                      jsr      Doimg                ; display image
  335 |  1 asmdemo.s     71 | Comment     | 11 |         |    0 | 00/0E3A               |                 ;jsr DoPaint
  336 |  1 asmdemo.s     72 | Code        | 11 |         |    2 | 00/0E3A : A9 00       |                      lda      #0                   ; init quif flag
  337 |  1 asmdemo.s     73 | Code        | 11 |         |    3 | 00/0E3C : 8D 5C 0F    |                      sta      quitflag             
  338 |  1 asmdemo.s     74 | Code        | 11 |         |    3 | 00/0E3F : 20 4A 11    |                      jsr      WaitForKeyPress      ;
  339 |  1 asmdemo.s     75 | Code        | 11 |         |    3 | 00/0E42 : 20 20 11    |                      jsr      DoKey                ; process key
  340 |  1 asmdemo.s     76 | Code        | 11 |         |    3 | 00/0E45 : AD 5C 0F    |                      lda      quitflag             ; test quit flag (=1 if escape key)
  341 |  1 asmdemo.s     77 | Code        | 11 |         |    2 | 00/0E48 : F0 ED       |                      beq      startimage           ; if 0 then loop
  342 |  1 asmdemo.s     78 | Code        | 11 |         |    3 | 00/0E4A : 20 CC 11    |                      jsr      DoTextScreen         ; else set text screen
  343 |  1 asmdemo.s     79 | Code        | 11 |         |    1 | 00/0E4D : 60          |                      rts                           ; END OF PROGRAM (without error)
  344 |  1 asmdemo.s     80 | Comment     | 11 |         |    0 | 00/0E4E               | *
  345 |  1 asmdemo.s     81 | Comment     | 11 |         |    0 | 00/0E4E               | *********************************************************************
  346 |  1 asmdemo.s     82 | Comment     | 11 |         |    0 | 00/0E4E               | *
  347 |  1 asmdemo.s     83 | Comment     | 11 |         |    0 | 00/0E4E               | *<sym>
  348 |  1 asmdemo.s     84 | Empty       | 11 |         |    0 | 00/0E4E               | DoHeader                                           
  349 |  1 asmdemo.s     85 | Comment     | 11 |         |    0 | 00/0E4E               | * check image specs.
  350 |  1 asmdemo.s     86 | Code        | 11 |         |    3 | 00/0E4E : 20 F2 0E    |                      jsr      TestSignature        ; test BMP signature
  351 |  1 asmdemo.s     87 | Code        | 11 |         |    2 | 00/0E51 : 90 01       |                      bcc      oksign               ; exit on error if carry set
  352 |  1 asmdemo.s     88 | Code        | 11 |         |    1 | 00/0E53 : 60          |                      rts                           
  353 |  1 asmdemo.s     89 | Comment     | 11 |         |    0 | 00/0E54               | *<sym>
  354 |  1 asmdemo.s     90 | Empty       | 11 |         |    0 | 00/0E54               | oksign                                             
  355 |  1 asmdemo.s     91 | Comment     | 11 |         |    0 | 00/0E54               | * get file length
  356 |  1 asmdemo.s     92 | Code        | 11 |         |    2 | 00/0E54 : A2 02       |                      ldx      #2                   ; offset to file length in BMP header
  357 |  1 asmdemo.s     93 | Code        | 11 |         |    3 | 00/0E56 : BD 00 60    |                      lda      {$6000},x            
  358 |  1 asmdemo.s     94 | Code        | 11 |         |    3 | 00/0E59 : 8D E8 0E    |                      sta      filelen              
  359 |  1 asmdemo.s     95 | Code        | 11 |         |    1 | 00/0E5C : E8          |                      inx                           
  360 |  1 asmdemo.s     96 | Code        | 11 |         |    3 | 00/0E5D : BD 00 60    |                      lda      {$6000},x            
  361 |  1 asmdemo.s     97 | Code        | 11 |         |    3 | 00/0E60 : 8D E9 0E    |                      sta      filelen+1            
  362 |  1 asmdemo.s     98 | Comment     | 11 |         |    0 | 00/0E63               | * check file length
  363 |  1 asmdemo.s     99 | Code        | 11 |         |    3 | 00/0E63 : AD E9 0E    |                      lda      filelen+1            
  364 |  1 asmdemo.s    100 | Code        | 11 |         |    2 | 00/0E66 : C9 20       |                      cmp      #>{$2000}            
  365 |  1 asmdemo.s    101 | Code        | 11 |         |    2 | 00/0E68 : D0 05       |                      bne      ozunid_1             
  366 |  1 asmdemo.s    102 | Code        | 11 |         |    3 | 00/0E6A : AD E8 0E    |                      lda      filelen              
  367 |  1 asmdemo.s    103 | Code        | 11 |         |    2 | 00/0E6D : C9 00       |                      cmp      #<{$2000}            
  368 |  1 asmdemo.s    104 | Code        | 11 |         |    2 | 00/0E6F : 90 06       | ozunid_1             bcc      lower                
  369 |  1 asmdemo.s    105 | Code        | 11 |         |    2 | 00/0E71 : D0 02       |                      bne      higher               
  370 |  1 asmdemo.s    106 | Code        | 11 |         |    2 | 00/0E73 : F0 02       |                      beq      samelength           
  371 |  1 asmdemo.s    107 | Comment     | 11 |         |    0 | 00/0E75               | *<sym>
  372 |  1 asmdemo.s    108 | Empty       | 11 |         |    0 | 00/0E75               | higher                                             
  373 |  1 asmdemo.s    109 | Code        | 11 |         |    1 | 00/0E75 : 38          |                      sec                           ; size is too big
  374 |  1 asmdemo.s    110 | Code        | 11 |         |    1 | 00/0E76 : 60          |                      rts                           
  375 |  1 asmdemo.s    111 | Comment     | 11 |         |    0 | 00/0E77               | *<sym>
  376 |  1 asmdemo.s    112 | Empty       | 11 |         |    0 | 00/0E77               | samelength                                         ; file length = max : OK
  377 |  1 asmdemo.s    113 | Comment     | 11 |         |    0 | 00/0E77               | *<sym>
  378 |  1 asmdemo.s    114 | Empty       | 11 |         |    0 | 00/0E77               | lower                                              ; file length < max : OK
  379 |  1 asmdemo.s    115 | Code        | 11 |         |    2 | 00/0E77 : A2 12       |                      ldx      #$12                 ; get image width in BMP header
  380 |  1 asmdemo.s    116 | Code        | 11 |         |    3 | 00/0E79 : BD 00 60    |                      lda      {$6000},x            
  381 |  1 asmdemo.s    117 | Code        | 11 |         |    3 | 00/0E7C : 8D EA 0E    |                      sta      hdef                 
  382 |  1 asmdemo.s    118 | Code        | 11 |         |    1 | 00/0E7F : E8          |                      inx                           
  383 |  1 asmdemo.s    119 | Code        | 11 |         |    3 | 00/0E80 : BD 00 60    |                      lda      {$6000},x            
  384 |  1 asmdemo.s    120 | Code        | 11 |         |    3 | 00/0E83 : 8D EB 0E    |                      sta      hdef+1               
  385 |  1 asmdemo.s    121 | Code        | 11 |         |    2 | 00/0E86 : A2 16       |                      ldx      #$16                 ; get image height in BMP header
  386 |  1 asmdemo.s    122 | Code        | 11 |         |    3 | 00/0E88 : BD 00 60    |                      lda      {$6000},x            
  387 |  1 asmdemo.s    123 | Code        | 11 |         |    3 | 00/0E8B : 8D EC 0E    |                      sta      vdef                 
  388 |  1 asmdemo.s    124 | Code        | 11 |         |    1 | 00/0E8E : E8          |                      inx                           
  389 |  1 asmdemo.s    125 | Code        | 11 |         |    3 | 00/0E8F : BD 00 60    |                      lda      {$6000},x            
  390 |  1 asmdemo.s    126 | Code        | 11 |         |    3 | 00/0E92 : 8D ED 0E    |                      sta      vdef+1               
  391 |  1 asmdemo.s    127 | Empty       | 11 |         |    0 | 00/0E95               |                                                    
  392 |  1 asmdemo.s    128 | Code        | 11 |         |    3 | 00/0E95 : AD EB 0E    |                      lda      hdef+1               ; width must be <= maxwidth
  393 |  1 asmdemo.s    129 | Empty       | 11 |         |    0 | 00/0E98               |                                                    
  394 |  1 asmdemo.s    130 | Code        | 11 |         |    2 | 00/0E98 : C9 01       |                      cmp      #>{280}              
  395 |  1 asmdemo.s    131 | Code        | 11 |         |    2 | 00/0E9A : D0 05       |                      bne      ozunid_2             
  396 |  1 asmdemo.s    132 | Code        | 11 |         |    3 | 00/0E9C : AD EA 0E    |                      lda      hdef                 
  397 |  1 asmdemo.s    133 | Code        | 11 |         |    2 | 00/0E9F : C9 18       |                      cmp      #<{280}              
  398 |  1 asmdemo.s    134 | Code        | 11 |         |    2 | 00/0EA1 : 90 06       | ozunid_2             bcc      goodw                
  399 |  1 asmdemo.s    135 | Code        | 11 |         |    2 | 00/0EA3 : D0 02       |                      bne      badw                 
  400 |  1 asmdemo.s    136 | Code        | 11 |         |    2 | 00/0EA5 : F0 02       |                      beq      goodw                
  401 |  1 asmdemo.s    137 | Comment     | 11 |         |    0 | 00/0EA7               | *<sym>
  402 |  1 asmdemo.s    138 | Empty       | 11 |         |    0 | 00/0EA7               | badw                                               
  403 |  1 asmdemo.s    139 | Code        | 11 |         |    1 | 00/0EA7 : 38          |                      sec                           ; width is too large
  404 |  1 asmdemo.s    140 | Code        | 11 |         |    1 | 00/0EA8 : 60          |                      rts                           
  405 |  1 asmdemo.s    141 | Comment     | 11 |         |    0 | 00/0EA9               | *<sym>
  406 |  1 asmdemo.s    142 | Empty       | 11 |         |    0 | 00/0EA9               | goodw                                              
  407 |  1 asmdemo.s    143 | Code        | 11 |         |    3 | 00/0EA9 : AD ED 0E    |                      lda      vdef+1               ; height must be <= maxheight
  408 |  1 asmdemo.s    144 | Code        | 11 |         |    2 | 00/0EAC : C9 00       |                      cmp      #>{192}              
  409 |  1 asmdemo.s    145 | Code        | 11 |         |    2 | 00/0EAE : D0 05       |                      bne      ozunid_3             
  410 |  1 asmdemo.s    146 | Code        | 11 |         |    3 | 00/0EB0 : AD EC 0E    |                      lda      vdef                 
  411 |  1 asmdemo.s    147 | Code        | 11 |         |    2 | 00/0EB3 : C9 C0       |                      cmp      #<{192}              
  412 |  1 asmdemo.s    148 | Code        | 11 |         |    2 | 00/0EB5 : 90 04       | ozunid_3             bcc      goodh                
  413 |  1 asmdemo.s    149 | Code        | 11 |         |    2 | 00/0EB7 : D0 EE       |                      bne      badw                 
  414 |  1 asmdemo.s    150 | Code        | 11 |         |    2 | 00/0EB9 : F0 00       |                      beq      goodh                
  415 |  1 asmdemo.s    151 | Comment     | 11 |         |    0 | 00/0EBB               | *<sym>
  416 |  1 asmdemo.s    152 | Empty       | 11 |         |    0 | 00/0EBB               | goodh                                              
  417 |  1 asmdemo.s    153 | Code        | 11 |         |    2 | 00/0EBB : A2 1C       |                      ldx      #$1C                 ; offset to image depth (# of bits per pixel)
  418 |  1 asmdemo.s    154 | Code        | 11 |         |    3 | 00/0EBD : BD 00 60    |                      lda      {$6000},x            ; get value
  419 |  1 asmdemo.s    155 | Code        | 11 |         |    2 | 00/0EC0 : C9 01       |                      cmp      #1                   ; must be 1
  420 |  1 asmdemo.s    156 | Code        | 11 |         |    2 | 00/0EC2 : F0 02       |                      beq      gooddepth            
  421 |  1 asmdemo.s    157 | Code        | 11 |         |    1 | 00/0EC4 : 38          |                      sec                           ; <> 1 bit per pixel
  422 |  1 asmdemo.s    158 | Code        | 11 |         |    1 | 00/0EC5 : 60          |                      rts                           
  423 |  1 asmdemo.s    159 | Comment     | 11 |         |    0 | 00/0EC6               | *<sym>
  424 |  1 asmdemo.s    160 | Empty       | 11 |         |    0 | 00/0EC6               | gooddepth                                          
  425 |  1 asmdemo.s    161 | Code        | 11 |         |    2 | 00/0EC6 : A2 0A       |                      ldx      #$A                  ; get image offset in BMP header
  426 |  1 asmdemo.s    162 | Comment     | 11 |         |    0 | 00/0EC8               |                                         ; image data start @ bmp+imgoffset
  427 |  1 asmdemo.s    163 | Code        | 11 |         |    3 | 00/0EC8 : BD 00 60    |                      lda      {$6000},x            
  428 |  1 asmdemo.s    164 | Code        | 11 |         |    3 | 00/0ECB : 8D EE 0E    |                      sta      imgoffset            
  429 |  1 asmdemo.s    165 | Code        | 11 |         |    1 | 00/0ECE : E8          |                      inx                           
  430 |  1 asmdemo.s    166 | Code        | 11 |         |    3 | 00/0ECF : BD 00 60    |                      lda      {$6000},x            
  431 |  1 asmdemo.s    167 | Code        | 11 |         |    3 | 00/0ED2 : 8D EF 0E    |                      sta      imgoffset+1          
  432 |  1 asmdemo.s    168 | Empty       | 11 |         |    0 | 00/0ED5               |                                                    
  433 |  1 asmdemo.s    169 | Code        | 11 |         |    2 | 00/0ED5 : A9 00       |                      lda      #<{$6000}            ; set pointer to beginning of image data
  434 |  1 asmdemo.s    170 | Code        | 11 |         |    1 | 00/0ED7 : 18          |                      clc                           
  435 |  1 asmdemo.s    171 | Code        | 11 |         |    3 | 00/0ED8 : 6D EE 0E    |                      adc      imgoffset            
  436 |  1 asmdemo.s    172 | Code        | 11 |         |    3 | 00/0EDB : 8D F0 0E    |                      sta      imgdata              
  437 |  1 asmdemo.s    173 | Code        | 11 |         |    2 | 00/0EDE : A9 60       |                      lda      #>{$6000}            
  438 |  1 asmdemo.s    174 | Code        | 11 |         |    3 | 00/0EE0 : 6D EF 0E    |                      adc      imgoffset+1          
  439 |  1 asmdemo.s    175 | Code        | 11 |         |    3 | 00/0EE3 : 8D F1 0E    |                      sta      imgdata+1            
  440 |  1 asmdemo.s    176 | Code        | 11 |         |    1 | 00/0EE6 : 18          |                      clc                           
  441 |  1 asmdemo.s    177 | Code        | 11 |         |    1 | 00/0EE7 : 60          |                      rts                           
  442 |  1 asmdemo.s    178 | Comment     | 11 |         |    0 | 00/0EE8               | *<sym>
  443 |  1 asmdemo.s    179 | Data        | 11 |         |    2 | 00/0EE8 : 00 00       | filelen              ds       2                    
  444 |  1 asmdemo.s    180 | Comment     | 11 |         |    0 | 00/0EEA               | *<syme>
  445 |  1 asmdemo.s    181 | Equivalence | 11 |         |    0 | 00/0EEA               | maxlen               equ      $2000                ; 8 k for image (between $6000 and $7FFF)
  446 |  1 asmdemo.s    182 | Comment     | 11 |         |    0 | 00/0EEA               | *<syme>
  447 |  1 asmdemo.s    183 | Equivalence | 11 |         |    0 | 00/0EEA               | maxwidth             equ      280                  ; = 560 / 2 (each pixel is doubled in width)
  448 |  1 asmdemo.s    184 | Comment     | 11 |         |    0 | 00/0EEA               | *<syme>
  449 |  1 asmdemo.s    185 | Equivalence | 11 |         |    0 | 00/0EEA               | maxheight            equ      192                  ; screen height in pixels
  450 |  1 asmdemo.s    186 | Comment     | 11 |         |    0 | 00/0EEA               | *<sym>
  451 |  1 asmdemo.s    187 | Data        | 11 |         |    2 | 00/0EEA : 00 00       | hdef                 ds       2                    ; image width
  452 |  1 asmdemo.s    188 | Comment     | 11 |         |    0 | 00/0EEC               | *<sym>
  453 |  1 asmdemo.s    189 | Data        | 11 |         |    2 | 00/0EEC : 00 00       | vdef                 ds       2                    ; image height
  454 |  1 asmdemo.s    190 | Comment     | 11 |         |    0 | 00/0EEE               | *<sym>
  455 |  1 asmdemo.s    191 | Data        | 11 |         |    2 | 00/0EEE : 00 00       | imgoffset            ds       2                    ; offset to image data (over BMP header)
  456 |  1 asmdemo.s    192 | Comment     | 11 |         |    0 | 00/0EF0               | *<sym>
  457 |  1 asmdemo.s    193 | Empty       | 11 |         |    0 | 00/0EF0               | imgdata                                            
  458 |  1 asmdemo.s    194 | Data        | 11 |         |    2 | 00/0EF0 : 00 00       |                      ds       2                    ; address of image data
  459 |  1 asmdemo.s    195 | Comment     | 11 |         |    0 | 00/0EF2               | *
  460 |  1 asmdemo.s    196 | Comment     | 11 |         |    0 | 00/0EF2               | *
  461 |  1 asmdemo.s    197 | Comment     | 11 |         |    0 | 00/0EF2               | *<sym>
  462 |  1 asmdemo.s    198 | Empty       | 11 |         |    0 | 00/0EF2               | TestSignature                                      
  463 |  1 asmdemo.s    199 | Code        | 11 |         |    3 | 00/0EF2 : AD 00 60    |                      lda      {$6000}              ; test signature
  464 |  1 asmdemo.s    200 | Code        | 11 |         |    2 | 00/0EF5 : C9 42       |                      cmp      #'B'                 
  465 |  1 asmdemo.s    201 | Code        | 11 |         |    2 | 00/0EF7 : D0 07       |                      bne      errSign              
  466 |  1 asmdemo.s    202 | Code        | 11 |         |    3 | 00/0EF9 : AD 01 60    |                      lda      {$6000}+1            
  467 |  1 asmdemo.s    203 | Code        | 11 |         |    2 | 00/0EFC : C9 4D       |                      cmp      #'M'                 
  468 |  1 asmdemo.s    204 | Code        | 11 |         |    2 | 00/0EFE : F0 02       |                      beq      signatureOK          
  469 |  1 asmdemo.s    205 | Comment     | 11 |         |    0 | 00/0F00               | *<sym>
  470 |  1 asmdemo.s    206 | Code        | 11 |         |    1 | 00/0F00 : 38          | errSign              sec                           
  471 |  1 asmdemo.s    207 | Code        | 11 |         |    1 | 00/0F01 : 60          |                      rts                           
  472 |  1 asmdemo.s    208 | Comment     | 11 |         |    0 | 00/0F02               | *<sym>
  473 |  1 asmdemo.s    209 | Code        | 11 |         |    1 | 00/0F02 : 18          | signatureOK          clc                           
  474 |  1 asmdemo.s    210 | Code        | 11 |         |    1 | 00/0F03 : 60          |                      rts                           
  475 |  1 asmdemo.s    211 | Empty       | 11 |         |    0 | 00/0F04               |                                                    
  476 |  1 asmdemo.s    212 | Comment     | 11 |         |    0 | 00/0F04               | * * * * Exit with an error * * * * 
  477 |  1 asmdemo.s    213 | Comment     | 11 |         |    0 | 00/0F04               | *<sym>
  478 |  1 asmdemo.s    214 | Code        | 11 |         |    3 | 00/0F04 : 20 CC 11    | dataerr              jsr      DoTextScreen         ; bad signature
  479 |  1 asmdemo.s    215 | Code        | 11 |         |    2 | 00/0F07 : A2 00       |                      ldx      #0                   
  480 |  1 asmdemo.s    216 | Comment     | 11 |         |    0 | 00/0F09               | *<sym>
  481 |  1 asmdemo.s    217 | Code        | 11 |         |    3 | 00/0F09 : BD 3D 0F    | printchar            lda      errmsg,x             
  482 |  1 asmdemo.s    218 | Code        | 11 |         |    2 | 00/0F0C : F0 07       |                      beq      errend               
  483 |  1 asmdemo.s    219 | Code        | 11 |         |    3 | 00/0F0E : 20 ED FD    |                      jsr      {$FDED}              
  484 |  1 asmdemo.s    220 | Code        | 11 |         |    1 | 00/0F11 : E8          |                      inx                           
  485 |  1 asmdemo.s    221 | Code        | 11 |         |    3 | 00/0F12 : 4C 09 0F    |                      jmp      printchar            
  486 |  1 asmdemo.s    222 | Comment     | 11 |         |    0 | 00/0F15               | *<sym>
  487 |  1 asmdemo.s    223 | Code        | 11 |         |    3 | 00/0F15 : 20 8E FD    | errend               jsr      {$FD8E}              
  488 |  1 asmdemo.s    224 | Code        | 11 |         |    1 | 00/0F18 : 60          |                      rts                           
  489 |  1 asmdemo.s    225 | Comment     | 11 |         |    0 | 00/0F19               | * * * * * * * * * * * * * * * * *
  490 |  1 asmdemo.s    226 | Comment     | 11 |         |    0 | 00/0F19               | *
  491 |  1 asmdemo.s    227 | Comment     | 11 |         |    0 | 00/0F19               | *<sym>                             
  492 |  1 asmdemo.s    228 | Data        | 11 |         |   36 | 00/0F19 : 00 00 00 00 | MyPort               ds       {{{{{{{{{{{0}+4}+2}+2}+8}+10}+4}+2}+1}+1}+2}; space for a grafport stucture
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
  493 |  1 asmdemo.s    229 | Empty       | 11 |         |    0 | 00/0F3D               |                                                    
  494 |  1 asmdemo.s    230 | Comment     | 11 |         |    0 | 00/0F3D               | *<sym>
  495 |  1 asmdemo.s    231 | Data        | 11 |         |    7 | 00/0F3D : C5 F2 F2 EF | errmsg               asc      "Error !"            
      |                     |             |    |         |      |           F2 A0 A1    |
  496 |  1 asmdemo.s    232 | Data        | 11 |         |    1 | 00/0F44 : 00          |                      dfb      0                    
  497 |  1 asmdemo.s    233 | Comment     | 11 |         |    0 | 00/0F45               | *
  498 |  1 asmdemo.s    234 | Comment     | 11 |         |    0 | 00/0F45               | * Doimg
  499 |  1 asmdemo.s    235 | Comment     | 11 |         |    0 | 00/0F45               | * lopp on each line
  500 |  1 asmdemo.s    236 | Comment     | 11 |         |    0 | 00/0F45               | * loop on a line (lopp length = hdef bytes / 8) => calculte loop length 
  501 |  1 asmdemo.s    237 | Comment     | 11 |         |    0 | 00/0F45               | * needs : pointer to inputbyte
  502 |  1 asmdemo.s    238 | Comment     | 11 |         |    0 | 00/0F45               | * init pointer to imgdata
  503 |  1 asmdemo.s    239 | Empty       | 11 |         |    0 | 00/0F45               |                                                    
  504 |  1 asmdemo.s    240 | Comment     | 11 |         |    0 | 00/0F45               | * for i = 1 to loop length
  505 |  1 asmdemo.s    241 | Comment     | 11 |         |    0 | 00/0F45               | * for each byte :
  506 |  1 asmdemo.s    242 | Comment     | 11 |         |    0 | 00/0F45               | * loop 8 time (or less if end of line occurs before 8)
  507 |  1 asmdemo.s    243 | Comment     | 11 |         |    0 | 00/0F45               | * get next bit by shifting left in C
  508 |  1 asmdemo.s    244 | Comment     | 11 |         |    0 | 00/0F45               | * poke bit in output byte : need bitcounter
  509 |  1 asmdemo.s    245 | Comment     | 11 |         |    0 | 00/0F45               | * if C = 0 : x = bitcounter; lda output byte ; and tableZero ; sta output byte
  510 |  1 asmdemo.s    246 | Comment     | 11 |         |    0 | 00/0F45               | * if C = 1 : x = bitcounter; lda tableZero,x ; eor $ff ; and output byte ; sta output byte
  511 |  1 asmdemo.s    247 | Comment     | 11 |         |    0 | 00/0F45               | * inc bitcounter ; cmp #7 ; bne loop else { next output byte, bitcounter = 0}
  512 |  1 asmdemo.s    248 | Comment     | 11 |         |    0 | 00/0F45               | * Draw line using PaintBits function in graphic primitives package
  513 |  1 asmdemo.s    249 | Comment     | 11 |         |    0 | 00/0F45               | * next line
  514 |  1 asmdemo.s    250 | Comment     | 11 |         |    0 | 00/0F45               | * check for last line
  515 |  1 asmdemo.s    251 | Comment     | 11 |         |    0 | 00/0F45               | *
  516 |  1 asmdemo.s    252 | Comment     | 11 |         |    0 | 00/0F45               | * vars :
  517 |  1 asmdemo.s    253 | Comment     | 11 |         |    0 | 00/0F45               | *<sym>
  518 |  1 asmdemo.s    254 | Data        | 11 |         |    1 | 00/0F45 : 00          | lineCnt              ds       1                    ; current # of lines
  519 |  1 asmdemo.s    255 | Comment     | 11 |         |    0 | 00/0F46               | *<sym>
  520 |  1 asmdemo.s    256 | Data        | 11 |         |    1 | 00/0F46 : 00          | inputBitPos          ds       1                    ; current position in input byte (0 to 7)
  521 |  1 asmdemo.s    257 | Comment     | 11 |         |    0 | 00/0F47               | *<sym>
  522 |  1 asmdemo.s    258 | Data        | 11 |         |    2 | 00/0F47 : 00 00       | inputBitCnt          ds       2                    ; current # of input byte (0 to hdef - 1)
  523 |  1 asmdemo.s    259 | Comment     | 11 |         |    0 | 00/0F49               | *<sym>
  524 |  1 asmdemo.s    260 | Data        | 11 |         |    1 | 00/0F49 : 00          | outputBitPos         ds       1                    ; current position in ouput byte (0 to 6)
  525 |  1 asmdemo.s    261 | Comment     | 11 |         |    0 | 00/0F4A               | *<sym>
  526 |  1 asmdemo.s    262 | Data        | 11 |         |    1 | 00/0F4A : 00          | inbyte               ds       1                    ; save input byte
  527 |  1 asmdemo.s    263 | Comment     | 11 |         |    0 | 00/0F4B               | *<sym>
  528 |  1 asmdemo.s    264 | Data        | 11 |         |    1 | 00/0F4B : 00          | inputByteCnt         ds       1                    ; counts # of input byte in a line
  529 |  1 asmdemo.s    265 | Comment     | 11 |         |    0 | 00/0F4C               | *<sym>
  530 |  1 asmdemo.s    266 | Empty       | 11 |         |    0 | 00/0F4C               | tableZero                                          
  531 |  1 asmdemo.s    267 | Data        | 11 |         |    1 | 00/0F4C : FE          |                      db       %11111110            
  532 |  1 asmdemo.s    268 | Data        | 11 |         |    1 | 00/0F4D : FD          |                      db       %11111101            
  533 |  1 asmdemo.s    269 | Data        | 11 |         |    1 | 00/0F4E : FB          |                      db       %11111011            
  534 |  1 asmdemo.s    270 | Data        | 11 |         |    1 | 00/0F4F : F7          |                      db       %11110111            
  535 |  1 asmdemo.s    271 | Data        | 11 |         |    1 | 00/0F50 : EF          |                      db       %11101111            
  536 |  1 asmdemo.s    272 | Data        | 11 |         |    1 | 00/0F51 : DF          |                      db       %11011111            
  537 |  1 asmdemo.s    273 | Data        | 11 |         |    1 | 00/0F52 : BF          |                      db       %10111111            
  538 |  1 asmdemo.s    274 | Comment     | 11 |         |    0 | 00/0F53               | *<sym>
  539 |  1 asmdemo.s    275 | Data        | 11 |         |    7 | 00/0F53 : 00 00 00 00 | tableOne             ds       7                    
      |                     |             |    |         |      |           00 00 00    |
  540 |  1 asmdemo.s    276 | Comment     | 11 |         |    0 | 00/0F5A               | *<sym>
  541 |  1 asmdemo.s    277 | Data        | 11 |         |    1 | 00/0F5A : 00          | bitmapwidth          ds       1                    
  542 |  1 asmdemo.s    278 | Comment     | 11 |         |    0 | 00/0F5B               | *<sym>
  543 |  1 asmdemo.s    279 | Data        | 11 |         |    1 | 00/0F5B : 01          | flipflop             db       1                    ; used to double pixels horizontally
  544 |  1 asmdemo.s    280 | Comment     | 11 |         |    0 | 00/0F5C               | *<sym>
  545 |  1 asmdemo.s    281 | Data        | 11 |         |    1 | 00/0F5C : 00          | quitflag             ds       1                    ; to ckeck if user press escape key
  546 |  1 asmdemo.s    282 | Empty       | 11 |         |    0 | 00/0F5D               |                                                    
  547 |  1 asmdemo.s    283 | Comment     | 11 |         |    0 | 00/0F5D               | ******** line grafport ********
  548 |  1 asmdemo.s    284 | Comment     | 11 |         |    0 | 00/0F5D               | *<sym>
  549 |  1 asmdemo.s    285 | Data        | 11 |         |    4 | 00/0F5D : 00 00 00 00 | imageLine            dw       0,0                  ; view location on current port
  550 |  1 asmdemo.s    286 | Comment     | 11 |         |    0 | 00/0F61               | *<sym>
  551 |  1 asmdemo.s    287 | Data        | 11 |         |    2 | 00/0F61 : 6D 0F       | imfbits              dw       outbuff              ; bitmap pointer
  552 |  1 asmdemo.s    288 | Comment     | 11 |         |    0 | 00/0F63               | *<sym>
  553 |  1 asmdemo.s    289 | Data        | 11 |         |    2 | 00/0F63 : 00 00       | imgw                 dw       0                    ; width of bitmap
  554 |  1 asmdemo.s    290 | Comment     | 11 |         |    0 | 00/0F65               | *<sym>
  555 |  1 asmdemo.s    291 | Data        | 11 |         |    8 | 00/0F65 : 00 00 00 00 | clipr                dw       0,0,0,0              ; clip rectangle
      |                     |             |    |         |      |           00 00 00 00 |
  556 |  1 asmdemo.s    292 | Comment     | 11 |         |    0 | 00/0F6D               | *<sym>
  557 |  1 asmdemo.s    293 | Data        | 11 |         |   80 | 00/0F6D : 00 00 00 00 | outbuff              ds       80                   
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
  558 |  1 asmdemo.s    294 | Comment     | 11 |         |    0 | 00/0FBD               | *<sym>
  559 |  1 asmdemo.s    295 | Data        | 11 |         |    1 | 00/0FBD : 01          | carryf               db       1                    
  560 |  1 asmdemo.s    296 | Comment     | 11 |         |    0 | 00/0FBE               | *<sym>
  561 |  1 asmdemo.s    297 | Data        | 11 |         |    1 | 00/0FBE : 01          | inverse              db       1                    
  562 |  1 asmdemo.s    298 | Empty       | 11 |         |    0 | 00/0FBF               |                                                    
  563 |  1 asmdemo.s    299 | Comment     | 11 |         |    0 | 00/0FBF               | *<sym>
  564 |  1 asmdemo.s    300 | Empty       | 11 |         |    0 | 00/0FBF               | Doimg                                              
  565 |  1 asmdemo.s    301 | Comment     | 11 |         |    0 | 00/0FBF               | ***** init *****
  566 |  1 asmdemo.s    302 | Empty       | 11 |         |    0 | 00/0FBF               |                                                    
  567 |  1 asmdemo.s    303 | Code        | 11 |         |    3 | 00/0FBF : 20 EE 11    |                      jsr      clearbuffer          ; clear line buffer
  568 |  1 asmdemo.s    304 | Empty       | 11 |         |    0 | 00/0FC2               |                                                    
  569 |  1 asmdemo.s    305 | Code        | 11 |         |    2 | 00/0FC2 : A9 00       |                      lda      #0                   ; init input line counter
  570 |  1 asmdemo.s    306 | Code        | 11 |         |    3 | 00/0FC4 : 8D 45 0F    |                      sta      lineCnt              
  571 |  1 asmdemo.s    307 | Code        | 11 |         |    3 | 00/0FC7 : 8D 47 0F    |                      sta      inputBitCnt          ; init input bit counter
  572 |  1 asmdemo.s    308 | Code        | 11 |         |    3 | 00/0FCA : 8D 48 0F    |                      sta      inputBitCnt+1        
  573 |  1 asmdemo.s    309 | Code        | 11 |         |    3 | 00/0FCD : 8D 4B 0F    |                      sta      inputByteCnt         ; init # of byte in a row
  574 |  1 asmdemo.s    310 | Empty       | 11 |         |    0 | 00/0FD0               |                                                    
  575 |  1 asmdemo.s    311 | Code        | 11 |         |    3 | 00/0FD0 : 8D 49 0F    |                      sta      outputBitPos         ; init output bit counter
  576 |  1 asmdemo.s    312 | Empty       | 11 |         |    0 | 00/0FD3               |                                                    
  577 |  1 asmdemo.s    313 | Code        | 11 |         |    3 | 00/0FD3 : AD F0 0E    |                      lda      imgdata              ; init pointer to image data (input)
  578 |  1 asmdemo.s    314 | Code        | 11 |         |    3 | 00/0FD6 : 8D 20 10    |                      sta      lineloop+1           
  579 |  1 asmdemo.s    315 | Code        | 11 |         |    3 | 00/0FD9 : AD F1 0E    |                      lda      imgdata+1            
  580 |  1 asmdemo.s    316 | Code        | 11 |         |    3 | 00/0FDC : 8D 21 10    |                      sta      lineloop+2           
  581 |  1 asmdemo.s    317 | Empty       | 11 |         |    0 | 00/0FDF               |                                                    
  582 |  1 asmdemo.s    318 | Code        | 11 |         |    2 | 00/0FDF : A9 6D       |                      lda      #<outbuff            ; init pointer to ouput (buffer)
  583 |  1 asmdemo.s    319 | Code        | 11 |         |    3 | 00/0FE1 : 8D 45 10    |                      sta      getoutbyte+1         
  584 |  1 asmdemo.s    320 | Code        | 11 |         |    2 | 00/0FE4 : A9 0F       |                      lda      #>outbuff            
  585 |  1 asmdemo.s    321 | Code        | 11 |         |    3 | 00/0FE6 : 8D 46 10    |                      sta      getoutbyte+2         
  586 |  1 asmdemo.s    322 | Empty       | 11 |         |    0 | 00/0FE9               |                                                    
  587 |  1 asmdemo.s    323 | Code        | 11 |         |    2 | 00/0FE9 : A2 00       |                      ldx      #0                   ; init tableOne (= eor table Zero)
  588 |  1 asmdemo.s    324 | Comment     | 11 |         |    0 | 00/0FEB               | *<sym> 
  589 |  1 asmdemo.s    325 | Code        | 11 |         |    3 | 00/0FEB : BD 4C 0F    | tabloop              lda      tableZero,x          
  590 |  1 asmdemo.s    326 | Code        | 11 |         |    2 | 00/0FEE : 49 FF       |                      eor      #$FF                 
  591 |  1 asmdemo.s    327 | Code        | 11 |         |    3 | 00/0FF0 : 9D 53 0F    |                      sta      tableOne,x           
  592 |  1 asmdemo.s    328 | Code        | 11 |         |    1 | 00/0FF3 : E8          |                      inx                           
  593 |  1 asmdemo.s    329 | Code        | 11 |         |    2 | 00/0FF4 : E0 07       |                      cpx      #7                   
  594 |  1 asmdemo.s    330 | Code        | 11 |         |    2 | 00/0FF6 : D0 F3       |                      bne      tabloop              
  595 |  1 asmdemo.s    331 | Comment     | 11 |         |    0 | 00/0FF8               | *<sym>
  596 |  1 asmdemo.s    332 | Empty       | 11 |         |    0 | 00/0FF8               | getwidth                                           
  597 |  1 asmdemo.s    333 | Code        | 11 |         |    3 | 00/0FF8 : AD EA 0E    |                      lda      hdef                 
  598 |  1 asmdemo.s    334 | Code        | 11 |         |    3 | 00/0FFB : AE EB 0E    |                      ldx      hdef+1               
  599 |  1 asmdemo.s    335 | Code        | 11 |         |    3 | 00/0FFE : 20 12 12    |                      jsr      computeBytes         
  600 |  1 asmdemo.s    336 | Code        | 11 |         |    3 | 00/1001 : 8E 5A 0F    |                      stx      bitmapwidth          
  601 |  1 asmdemo.s    337 | Comment     | 11 |         |    0 | 00/1004               | *<sym>
  602 |  1 asmdemo.s    338 | Empty       | 11 |         |    0 | 00/1004               | setline                                            
  603 |  1 asmdemo.s    339 | Code        | 11 |         |    3 | 00/1004 : AD EC 0E    |                      lda      vdef                 
  604 |  1 asmdemo.s    340 | Code        | 11 |         |    3 | 00/1007 : 8D 5F 0F    |                      sta      imageLine+2          ; set vertical position of lower image line
  605 |  1 asmdemo.s    341 | Empty       | 11 |         |    0 | 00/100A               |                                                    
  606 |  1 asmdemo.s    342 | Code        | 11 |         |    3 | 00/100A : AD 5A 0F    |                      lda      bitmapwidth          
  607 |  1 asmdemo.s    343 | Code        | 11 |         |    1 | 00/100D : 0A          |                      asl                           
  608 |  1 asmdemo.s    344 | Code        | 11 |         |    3 | 00/100E : 8D 63 0F    |                      sta      imgw                 ; set image width in byte
  609 |  1 asmdemo.s    345 | Empty       | 11 |         |    0 | 00/1011               |                                                    
  610 |  1 asmdemo.s    346 | Code        | 11 |         |    3 | 00/1011 : AD EA 0E    |                      lda      hdef                 ; set clip rectangle in pixels
  611 |  1 asmdemo.s    347 | Code        | 11 |         |    1 | 00/1014 : 0A          |                      asl                           
  612 |  1 asmdemo.s    348 | Code        | 11 |         |    3 | 00/1015 : 8D 69 0F    |                      sta      clipr+4              
  613 |  1 asmdemo.s    349 | Code        | 11 |         |    3 | 00/1018 : AD EB 0E    |                      lda      hdef+1               
  614 |  1 asmdemo.s    350 | Code        | 11 |         |    1 | 00/101B : 2A          |                      rol                           
  615 |  1 asmdemo.s    351 | Code        | 11 |         |    3 | 00/101C : 8D 6A 0F    |                      sta      clipr+5              
  616 |  1 asmdemo.s    352 | Empty       | 11 |         |    0 | 00/101F               |                                                    
  617 |  1 asmdemo.s    353 | Comment     | 11 |         |    0 | 00/101F               | ***** process data *****
  618 |  1 asmdemo.s    354 | Comment     | 11 |         |    0 | 00/101F               | * outer loop (on all bytes of an image line)
  619 |  1 asmdemo.s    355 | Comment     | 11 |         |    0 | 00/101F               | *<sym>   
  620 |  1 asmdemo.s    356 | Empty       | 11 |         |    0 | 00/101F               | lineloop                                           ; get a new input byte
  621 |  1 asmdemo.s    357 | Code        | 11 |         |    3 | 00/101F : AD FF FF    |                      lda      $ffff                ; self modified
  622 |  1 asmdemo.s    358 | Code        | 11 |         |    1 | 00/1022 : 48          |                      pha                           
  623 |  1 asmdemo.s    359 | Code        | 11 |         |    3 | 00/1023 : AD BE 0F    |                      lda      inverse              
  624 |  1 asmdemo.s    360 | Code        | 11 |         |    2 | 00/1026 : F0 06       |                      beq      normalvideo          
  625 |  1 asmdemo.s    361 | Code        | 11 |         |    1 | 00/1028 : 68          |                      pla                           
  626 |  1 asmdemo.s    362 | Code        | 11 |         |    2 | 00/1029 : 49 FF       |                      eor      #$ff                 
  627 |  1 asmdemo.s    363 | Code        | 11 |         |    3 | 00/102B : 4C 2F 10    |                      jmp      inversevideo         
  628 |  1 asmdemo.s    364 | Comment     | 11 |         |    0 | 00/102E               | *<sym>
  629 |  1 asmdemo.s    365 | Empty       | 11 |         |    0 | 00/102E               | normalvideo                                        
  630 |  1 asmdemo.s    366 | Code        | 11 |         |    1 | 00/102E : 68          |                      pla                           
  631 |  1 asmdemo.s    367 | Comment     | 11 |         |    0 | 00/102F               | *<sym>
  632 |  1 asmdemo.s    368 | Empty       | 11 |         |    0 | 00/102F               | inversevideo                                       
  633 |  1 asmdemo.s    369 | Code        | 11 |         |    3 | 00/102F : 8D 4A 0F    |                      sta      inbyte               ; save it
  634 |  1 asmdemo.s    370 | Code        | 11 |         |    3 | 00/1032 : EE 4B 0F    |                      inc      inputByteCnt         ; update counter
  635 |  1 asmdemo.s    371 | Empty       | 11 |         |    0 | 00/1035               |                                                    
  636 |  1 asmdemo.s    372 | Comment     | 11 |         |    0 | 00/1035               | * inner loop on pixels (= input bits)
  637 |  1 asmdemo.s    373 | Comment     | 11 |         |    0 | 00/1035               | *<sym>
  638 |  1 asmdemo.s    374 | Empty       | 11 |         |    0 | 00/1035               | pixelloop                                          
  639 |  1 asmdemo.s    375 | Code        | 11 |         |    3 | 00/1035 : AD 4A 0F    |                      lda      inbyte               ; reload input byte
  640 |  1 asmdemo.s    376 | Code        | 11 |         |    1 | 00/1038 : 0A          |                      asl                           ; get a bit
  641 |  1 asmdemo.s    377 | Code        | 11 |         |    3 | 00/1039 : 8D 4A 0F    |                      sta      inbyte               ; save shifted input byte
  642 |  1 asmdemo.s    378 | Empty       | 11 |         |    0 | 00/103C               |                                                    
  643 |  1 asmdemo.s    379 | Code        | 11 |         |    3 | 00/103C : EE 47 0F    |                      inc      inputBitCnt          
  644 |  1 asmdemo.s    380 | Code        | 11 |         |    2 | 00/103F : D0 03       |                      bne      getoutbyte           
  645 |  1 asmdemo.s    381 | Code        | 11 |         |    3 | 00/1041 : EE 48 0F    |                      inc      inputBitCnt+1        
  646 |  1 asmdemo.s    382 | Comment     | 11 |         |    0 | 00/1044               | *<sym>        
  647 |  1 asmdemo.s    383 | Empty       | 11 |         |    0 | 00/1044               | getoutbyte                                         
  648 |  1 asmdemo.s    384 | Code        | 11 |         |    3 | 00/1044 : AD FF FF    |                      lda      $ffff                ; get ouput byte
  649 |  1 asmdemo.s    385 | Code        | 11 |         |    3 | 00/1047 : AE 49 0F    |                      ldx      outputBitPos         
  650 |  1 asmdemo.s    386 | Code        | 11 |         |    2 | 00/104A : B0 0B       |                      bcs      pokeOne              ; bit coming from input byte = 1 ?
  651 |  1 asmdemo.s    387 | Comment     | 11 |         |    0 | 00/104C               | *<sym>
  652 |  1 asmdemo.s    388 | Empty       | 11 |         |    0 | 00/104C               | pokeZero                                           ; no : set this bit to 0 in output bit
  653 |  1 asmdemo.s    389 | Code        | 11 |         |    3 | 00/104C : 3D 4C 0F    |                      and      tableZero,x          ; A : ouput byte, and it with table value
  654 |  1 asmdemo.s    390 | Code        | 11 |         |    2 | 00/104F : A0 00       |                      ldy      #0                   
  655 |  1 asmdemo.s    391 | Code        | 11 |         |    3 | 00/1051 : 8C BD 0F    |                      sty      carryf               ; save carry value in carryf var
  656 |  1 asmdemo.s    392 | Code        | 11 |         |    3 | 00/1054 : 4C 5F 10    |                      jmp      pokeresult           
  657 |  1 asmdemo.s    393 | Comment     | 11 |         |    0 | 00/1057               | *<sym>
  658 |  1 asmdemo.s    394 | Empty       | 11 |         |    0 | 00/1057               | pokeOne                                            ; yes : set this bit to 1 in output bit
  659 |  1 asmdemo.s    395 | Code        | 11 |         |    2 | 00/1057 : A0 01       |                      ldy      #1                   
  660 |  1 asmdemo.s    396 | Code        | 11 |         |    3 | 00/1059 : 8C BD 0F    |                      sty      carryf               ; save carry value in carryf var
  661 |  1 asmdemo.s    397 | Code        | 11 |         |    3 | 00/105C : 1D 53 0F    |                      ora      tableOne,x           
  662 |  1 asmdemo.s    398 | Comment     | 11 |         |    0 | 00/105F               | *<sym>                                
  663 |  1 asmdemo.s    399 | Empty       | 11 |         |    0 | 00/105F               | pokeresult                                         ; save output byte
  664 |  1 asmdemo.s    400 | Code        | 11 |         |    3 | 00/105F : AE 45 10    |                      ldx      getoutbyte+1         ; get output address
  665 |  1 asmdemo.s    401 | Code        | 11 |         |    2 | 00/1062 : 86 06       |                      stx      {$06}                
  666 |  1 asmdemo.s    402 | Code        | 11 |         |    3 | 00/1064 : AE 46 10    |                      ldx      getoutbyte+2         
  667 |  1 asmdemo.s    403 | Code        | 11 |         |    2 | 00/1067 : 86 07       |                      stx      {$06}+1              
  668 |  1 asmdemo.s    404 | Code        | 11 |         |    2 | 00/1069 : A0 00       |                      ldy      #0                   
  669 |  1 asmdemo.s    405 | Code        | 11 |         |    2 | 00/106B : 91 06       |                      sta      ({$06}),y            ; poke output byte in its original place
  670 |  1 asmdemo.s    406 | Comment     | 11 |         |    0 | 00/106D               | *<sym> 
  671 |  1 asmdemo.s    407 | Code        | 11 |         |    3 | 00/106D : EE 49 0F    | updateoutput         inc      outputBitPos         ; get bit pos (output)
  672 |  1 asmdemo.s    408 | Code        | 11 |         |    3 | 00/1070 : AD 49 0F    |                      lda      outputBitPos         
  673 |  1 asmdemo.s    409 | Code        | 11 |         |    2 | 00/1073 : C9 07       |                      cmp      #7                   ; = 7 ?
  674 |  1 asmdemo.s    410 | Code        | 11 |         |    2 | 00/1075 : D0 08       |                      bne      ozunid_4             
  675 |  1 asmdemo.s    411 | Code        | 11 |         |    2 | 00/1077 : A9 00       |                      lda      #0                   
  676 |  1 asmdemo.s    412 | Code        | 11 |         |    3 | 00/1079 : 8D 49 0F    |                      sta      outputBitPos         ; yes : reset pos
  677 |  1 asmdemo.s    413 | Code        | 11 |         |    3 | 00/107C : 20 0D 11    |                      jsr      nextoutput           ; inc pointer
  678 |  1 asmdemo.s    414 | Empty       | 11 |         |    0 | 00/107F               | ozunid_4                                           
  679 |  1 asmdemo.s    415 | Code        | 11 |         |    1 | 00/107F : 18          |                      clc                           
  680 |  1 asmdemo.s    416 | Code        | 11 |         |    3 | 00/1080 : AC BD 0F    |                      ldy      carryf               
  681 |  1 asmdemo.s    417 | Code        | 11 |         |    2 | 00/1083 : F0 01       |                      beq      ozunid_5             
  682 |  1 asmdemo.s    418 | Code        | 11 |         |    1 | 00/1085 : 38          |                      sec                           
  683 |  1 asmdemo.s    419 | Code        | 11 |         |    3 | 00/1086 : AD 5B 0F    | ozunid_5             lda      flipflop             ; each pixel horizontally must be draw twice (and only twice)
  684 |  1 asmdemo.s    420 | Code        | 11 |         |    2 | 00/1089 : 49 01       |                      eor      #1                   ; test flipflop
  685 |  1 asmdemo.s    421 | Code        | 11 |         |    3 | 00/108B : 8D 5B 0F    |                      sta      flipflop             ; invvert it
  686 |  1 asmdemo.s    422 | Code        | 11 |         |    2 | 00/108E : F0 B4       |                      beq      getoutbyte           ; if 0 : draw same pixel once again
  687 |  1 asmdemo.s    423 | Empty       | 11 |         |    0 | 00/1090               |                                                    
  688 |  1 asmdemo.s    424 | Code        | 11 |         |    3 | 00/1090 : AD 47 0F    |                      lda      inputBitCnt          ; all pixels done for this line ?
  689 |  1 asmdemo.s    425 | Code        | 11 |         |    3 | 00/1093 : CD EA 0E    |                      cmp      hdef                 ;
  690 |  1 asmdemo.s    426 | Code        | 11 |         |    2 | 00/1096 : D0 54       |                      bne      nextpixel            ; no : loop to process next pixel
  691 |  1 asmdemo.s    427 | Code        | 11 |         |    3 | 00/1098 : AD 48 0F    |                      lda      inputBitCnt+1        
  692 |  1 asmdemo.s    428 | Code        | 11 |         |    3 | 00/109B : CD EB 0E    |                      cmp      hdef+1               
  693 |  1 asmdemo.s    429 | Code        | 11 |         |    2 | 00/109E : D0 4C       |                      bne      nextpixel            
  694 |  1 asmdemo.s    430 | Empty       | 11 |         |    0 | 00/10A0               |                                                    
  695 |  1 asmdemo.s    431 | Comment     | 11 |         |    0 | 00/10A0               | *<sym>  
  696 |  1 asmdemo.s    432 | Empty       | 11 |         |    0 | 00/10A0               | nextline                                           ; yes : paint current line and prepare next one
  697 |  1 asmdemo.s    433 | Code        | 11 |         |    3 | 00/10A0 : 20 16 11    |                      jsr      drawImgLine          ; a line has been calcultated, paint it !!!
  698 |  1 asmdemo.s    434 | Empty       | 11 |         |    0 | 00/10A3               |                                                    
  699 |  1 asmdemo.s    435 | Code        | 11 |         |    2 | 00/10A3 : A9 6D       |                      lda      #<outbuff            ; reset pointer to beginning of output buffer
  700 |  1 asmdemo.s    436 | Code        | 11 |         |    3 | 00/10A5 : 8D 45 10    |                      sta      getoutbyte+1         
  701 |  1 asmdemo.s    437 | Code        | 11 |         |    2 | 00/10A8 : A9 0F       |                      lda      #>outbuff            
  702 |  1 asmdemo.s    438 | Code        | 11 |         |    3 | 00/10AA : 8D 46 10    |                      sta      getoutbyte+2         
  703 |  1 asmdemo.s    439 | Code        | 11 |         |    3 | 00/10AD : 20 EE 11    |                      jsr      clearbuffer          ; zero ouput buffer
  704 |  1 asmdemo.s    440 | Comment     | 11 |         |    0 | 00/10B0               | *<sym> 
  705 |  1 asmdemo.s    441 | Empty       | 11 |         |    0 | 00/10B0               | loopadjust                                         ; in an image line, # of bytes must be divisible by 4
  706 |  1 asmdemo.s    442 | Comment     | 11 |         |    0 | 00/10B0               |                                         ; if not, padded with zeros to make it divisible by 4
  707 |  1 asmdemo.s    443 | Comment     | 11 |         |    0 | 00/10B0               |                                         ; so we need to jump over these useless bytes.
  708 |  1 asmdemo.s    444 | Code        | 11 |         |    3 | 00/10B0 : AD 4B 0F    |                      lda      inputByteCnt         ; get # of byte done in previous image line
  709 |  1 asmdemo.s    445 | Code        | 11 |         |    2 | 00/10B3 : 29 03       |                      and      #3                   ; if this number is divisible by 4
  710 |  1 asmdemo.s    446 | Code        | 11 |         |    2 | 00/10B5 : F0 0B       |                      beq      div4ok               ; go on
  711 |  1 asmdemo.s    447 | Code        | 11 |         |    3 | 00/10B7 : 20 04 11    |                      jsr      nextinput            ; else inc pointer to input data
  712 |  1 asmdemo.s    448 | Code        | 11 |         |    3 | 00/10BA : EE 4B 0F    |                      inc      inputByteCnt         ; inc counter
  713 |  1 asmdemo.s    449 | Code        | 11 |         |    3 | 00/10BD : 4C B0 10    |                      jmp      loopadjust           ; and loop until inputByteCnt is divisible by 4
  714 |  1 asmdemo.s    450 | Code        | 11 |         |    2 | 00/10C0 : D0 00       |                      bne      div4ok               
  715 |  1 asmdemo.s    451 | Comment     | 11 |         |    0 | 00/10C2               | *<sym> 
  716 |  1 asmdemo.s    452 | Empty       | 11 |         |    0 | 00/10C2               | div4ok                                             
  717 |  1 asmdemo.s    453 | Code        | 11 |         |    2 | 00/10C2 : A9 00       |                      lda      #0                   
  718 |  1 asmdemo.s    454 | Code        | 11 |         |    3 | 00/10C4 : 8D 4B 0F    |                      sta      inputByteCnt         ; init byte counter for a line
  719 |  1 asmdemo.s    455 | Code        | 11 |         |    3 | 00/10C7 : 20 04 11    |                      jsr      nextinput            ; inc pointer to input byte
  720 |  1 asmdemo.s    456 | Code        | 11 |         |    2 | 00/10CA : A9 00       |                      lda      #0                   
  721 |  1 asmdemo.s    457 | Code        | 11 |         |    3 | 00/10CC : 8D 46 0F    |                      sta      inputBitPos          ; reset bit pos for input
  722 |  1 asmdemo.s    458 | Code        | 11 |         |    3 | 00/10CF : 8D 47 0F    |                      sta      inputBitCnt          ; reset input bit counter
  723 |  1 asmdemo.s    459 | Code        | 11 |         |    3 | 00/10D2 : 8D 48 0F    |                      sta      inputBitCnt+1        
  724 |  1 asmdemo.s    460 | Code        | 11 |         |    3 | 00/10D5 : 8D 49 0F    |                      sta      outputBitPos         ; reset output byte position
  725 |  1 asmdemo.s    461 | Empty       | 11 |         |    0 | 00/10D8               |                                                    
  726 |  1 asmdemo.s    462 | Code        | 11 |         |    2 | 00/10D8 : A9 01       |                      lda      #1                   
  727 |  1 asmdemo.s    463 | Code        | 11 |         |    3 | 00/10DA : 8D 5B 0F    |                      sta      flipflop             ; reset toggle to double pixel width
  728 |  1 asmdemo.s    464 | Empty       | 11 |         |    0 | 00/10DD               |                                                    
  729 |  1 asmdemo.s    465 | Code        | 11 |         |    3 | 00/10DD : EE 45 0F    |                      inc      lineCnt              ; inc line counter
  730 |  1 asmdemo.s    466 | Code        | 11 |         |    3 | 00/10E0 : AD 45 0F    |                      lda      lineCnt              
  731 |  1 asmdemo.s    467 | Code        | 11 |         |    3 | 00/10E3 : CD EC 0E    |                      cmp      vdef                 ; all lines done ?
  732 |  1 asmdemo.s    468 | Code        | 11 |         |    2 | 00/10E6 : F0 03       |                      beq      endimage             ; yes : the image is finished !
  733 |  1 asmdemo.s    469 | Code        | 11 |         |    3 | 00/10E8 : 4C 1F 10    |                      jmp      lineloop             ; no : loop for another image line
  734 |  1 asmdemo.s    470 | Comment     | 11 |         |    0 | 00/10EB               | *<sym>  
  735 |  1 asmdemo.s    471 | Empty       | 11 |         |    0 | 00/10EB               | endimage                                           
  736 |  1 asmdemo.s    472 | Code        | 11 |         |    1 | 00/10EB : 60          |                      rts                           ; END !!!
  737 |  1 asmdemo.s    473 | Comment     | 11 |         |    0 | 00/10EC               | *<sym>         
  738 |  1 asmdemo.s    474 | Empty       | 11 |         |    0 | 00/10EC               | nextpixel                                          ; no : other pixels to go on current line
  739 |  1 asmdemo.s    475 | Code        | 11 |         |    3 | 00/10EC : EE 46 0F    |                      inc      inputBitPos          ; get bit pos (input)
  740 |  1 asmdemo.s    476 | Code        | 11 |         |    3 | 00/10EF : AD 46 0F    |                      lda      inputBitPos          
  741 |  1 asmdemo.s    477 | Code        | 11 |         |    2 | 00/10F2 : C9 08       |                      cmp      #8                   ; = 8 ?
  742 |  1 asmdemo.s    478 | Code        | 11 |         |    2 | 00/10F4 : F0 03       |                      beq      nextbyte             
  743 |  1 asmdemo.s    479 | Code        | 11 |         |    3 | 00/10F6 : 4C 35 10    |                      jmp      pixelloop            
  744 |  1 asmdemo.s    480 | Comment     | 11 |         |    0 | 00/10F9               | *<sym>  
  745 |  1 asmdemo.s    481 | Empty       | 11 |         |    0 | 00/10F9               | nextbyte                                           
  746 |  1 asmdemo.s    482 | Code        | 11 |         |    2 | 00/10F9 : A9 00       |                      lda      #0                   ; yes : adjust vars
  747 |  1 asmdemo.s    483 | Code        | 11 |         |    3 | 00/10FB : 8D 46 0F    |                      sta      inputBitPos          ; reset input bit position pos to 0
  748 |  1 asmdemo.s    484 | Code        | 11 |         |    3 | 00/10FE : 20 04 11    |                      jsr      nextinput            ; inc pointer to image data
  749 |  1 asmdemo.s    485 | Code        | 11 |         |    3 | 00/1101 : 4C 1F 10    |                      jmp      lineloop             ; loop to get next input byte
  750 |  1 asmdemo.s    486 | Comment     | 11 |         |    0 | 00/1104               | *<sym>                                 
  751 |  1 asmdemo.s    487 | Empty       | 11 |         |    0 | 00/1104               | nextinput                                          
  752 |  1 asmdemo.s    488 | Code        | 11 |         |    3 | 00/1104 : EE 20 10    |                      inc      lineloop+1           
  753 |  1 asmdemo.s    489 | Code        | 11 |         |    2 | 00/1107 : D0 03       |                      bne      nextinputO           
  754 |  1 asmdemo.s    490 | Code        | 11 |         |    3 | 00/1109 : EE 21 10    |                      inc      lineloop+2           
  755 |  1 asmdemo.s    491 | Comment     | 11 |         |    0 | 00/110C               | *<sym>
  756 |  1 asmdemo.s    492 | Code        | 11 |         |    1 | 00/110C : 60          | nextinputO           rts                           
  757 |  1 asmdemo.s    493 | Empty       | 11 |         |    0 | 00/110D               |                                                    
  758 |  1 asmdemo.s    494 | Comment     | 11 |         |    0 | 00/110D               | *<sym>
  759 |  1 asmdemo.s    495 | Empty       | 11 |         |    0 | 00/110D               | nextoutput                                         
  760 |  1 asmdemo.s    496 | Code        | 11 |         |    3 | 00/110D : EE 45 10    |                      inc      getoutbyte+1         
  761 |  1 asmdemo.s    497 | Code        | 11 |         |    2 | 00/1110 : D0 03       |                      bne      nextoutputO          
  762 |  1 asmdemo.s    498 | Code        | 11 |         |    3 | 00/1112 : EE 46 10    |                      inc      getoutbyte+2         
  763 |  1 asmdemo.s    499 | Comment     | 11 |         |    0 | 00/1115               | *<sym>
  764 |  1 asmdemo.s    500 | Code        | 11 |         |    1 | 00/1115 : 60          | nextoutputO          rts                           
  765 |  1 asmdemo.s    501 | Comment     | 11 |         |    0 | 00/1116               | *<sym>
  766 |  1 asmdemo.s    502 | Empty       | 11 |         |    0 | 00/1116               | drawImgLine                                        
  767 |  1 asmdemo.s    503 | Macro       | 11 |         |    0 | 00/1116               |                      GP_call  {{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1};imageLine; dram a line of the image
  768 |  1 asmdemo.s    503 | Code        | 11 |         |    3 | 00/1116 : 20 00 40    |                      jsr      {$4000}              ; graphic primitives only entry point
  769 |  1 asmdemo.s    503 | Data        | 11 |         |    1 | 00/1119 : 14          |                      dfb      {{{{{{{{{{{{{{{{{{{{1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}+1}; command ID (1 byte)
  770 |  1 asmdemo.s    503 | Data        | 11 |         |    2 | 00/111A : 5D 0F       |                      da       imageLine            ; address of parameter(s) (2 bytes), 0 if no paramter
  771 |  1 asmdemo.s    504 | Code        | 11 |         |    3 | 00/111C : CE 5F 0F    |                      dec      imageLine+2          
  772 |  1 asmdemo.s    505 | Code        | 11 |         |    1 | 00/111F : 60          |                      rts                           
  773 |  1 asmdemo.s    506 | Comment     | 11 |         |    0 | 00/1120               | *<syme>
  774 |  1 asmdemo.s    507 | Equivalence | 11 |         |    0 | 00/1120               | bmp                  equ      $6000                ; image is supposed to be loaded at $6000
  775 |  1 asmdemo.s    508 | Empty       | 11 |         |    0 | 00/1120               |                                                    
  776 |  1 asmdemo.s    509 | Comment     | 11 |         |    0 | 00/1120               | *<sym>
  777 |  1 asmdemo.s    510 | Empty       | 11 |         |    0 | 00/1120               | DoKey                                              ; test keys
  778 |  1 asmdemo.s    511 | Code        | 11 |         |    2 | 00/1120 : C9 E9       |                      cmp      #"i"                 ; if i ou I : negate image
  779 |  1 asmdemo.s    512 | Code        | 11 |         |    2 | 00/1122 : F0 1B       |                      beq      doInverse            
  780 |  1 asmdemo.s    513 | Code        | 11 |         |    2 | 00/1124 : C9 C9       |                      cmp      #"I"                 
  781 |  1 asmdemo.s    514 | Code        | 11 |         |    2 | 00/1126 : F0 17       |                      beq      doInverse            
  782 |  1 asmdemo.s    515 | Comment     | 11 |         |    0 | 00/1128               | *<sym>
  783 |  1 asmdemo.s    516 | Code        | 11 |         |    2 | 00/1128 : C9 9B       | nextkey              cmp      #$9B                 ; escape : exit
  784 |  1 asmdemo.s    517 | Code        | 11 |         |    2 | 00/112A : F0 0D       |                      beq      exitDK               
  785 |  1 asmdemo.s    518 | Empty       | 11 |         |    0 | 00/112C               |                                                    
  786 |  1 asmdemo.s    519 | Code        | 11 |         |    2 | 00/112C : C9 E3       |                      cmp      #"c"                 ; c for clear
  787 |  1 asmdemo.s    520 | Code        | 11 |         |    2 | 00/112E : F0 05       |                      beq      doclear              
  788 |  1 asmdemo.s    521 | Code        | 11 |         |    2 | 00/1130 : C9 C3       |                      cmp      #"C"                 
  789 |  1 asmdemo.s    522 | Code        | 11 |         |    2 | 00/1132 : F0 01       |                      beq      doclear              
  790 |  1 asmdemo.s    523 | Code        | 11 |         |    1 | 00/1134 : 60          |                      rts                           ; none of these keys : do nothing
  791 |  1 asmdemo.s    524 | Comment     | 11 |         |    0 | 00/1135               | *<sym>
  792 |  1 asmdemo.s    525 | Empty       | 11 |         |    0 | 00/1135               | doclear                                            
  793 |  1 asmdemo.s    526 | Code        | 11 |         |    3 | 00/1135 : 20 9E 11    |                      jsr      clerscr              ; call clear screen proc.
  794 |  1 asmdemo.s    527 | Code        | 11 |         |    1 | 00/1138 : 60          |                      rts                           
  795 |  1 asmdemo.s    528 | Comment     | 11 |         |    0 | 00/1139               | *<sym>
  796 |  1 asmdemo.s    529 | Code        | 11 |         |    2 | 00/1139 : A9 01       | exitDK               lda      #1                   ; escape : set quit flag
  797 |  1 asmdemo.s    530 | Code        | 11 |         |    3 | 00/113B : 8D 5C 0F    |                      sta      quitflag             
  798 |  1 asmdemo.s    531 | Code        | 11 |         |    1 | 00/113E : 60          |                      rts                           
  799 |  1 asmdemo.s    532 | Empty       | 11 |         |    0 | 00/113F               |                                                    
  800 |  1 asmdemo.s    533 | Comment     | 11 |         |    0 | 00/113F               | *<sym>
  801 |  1 asmdemo.s    534 | Empty       | 11 |         |    0 | 00/113F               | doInverse                                          
  802 |  1 asmdemo.s    535 | Code        | 11 |         |    3 | 00/113F : AD BE 0F    |                      lda      inverse              
  803 |  1 asmdemo.s    536 | Code        | 11 |         |    2 | 00/1142 : 49 01       |                      eor      #$01                 
  804 |  1 asmdemo.s    537 | Code        | 11 |         |    3 | 00/1144 : 8D BE 0F    |                      sta      inverse              
  805 |  1 asmdemo.s    538 | Code        | 11 |         |    3 | 00/1147 : 4C 37 0E    |                      jmp      startimage           
  806 |  1 asmdemo.s    539 | Empty       | 11 |         |    0 | 00/114A               |                                                    
  807 |  1 asmdemo.s    540 | Empty       | 11 |         |    0 | 00/114A               |                                                    
  808 |  1 asmdemo.s    541 | Comment     | 11 |         |    0 | 00/114A               | *<sym>
  809 |  1 asmdemo.s    542 | Empty       | 11 |         |    0 | 00/114A               | WaitForKeyPress                                    
  810 |  1 asmdemo.s    543 | Code        | 11 |         |    3 | 00/114A : AD 00 C0    |                      lda      {$C000}              
  811 |  1 asmdemo.s    544 | Code        | 11 |         |    2 | 00/114D : 10 FB       |                      bpl      WaitForKeyPress      
  812 |  1 asmdemo.s    545 | Code        | 11 |         |    3 | 00/114F : 8D 10 C0    |                      sta      {$C010}              
  813 |  1 asmdemo.s    546 | Code        | 11 |         |    1 | 00/1152 : 60          |                      rts                           
  814 |  1 asmdemo.s    547 | Empty       | 11 |         |    0 | 00/1153               |                                                    
  815 |  1 asmdemo.s    548 | Empty       | 11 |         |    0 | 00/1153               |                                                    
  816 |  1 asmdemo.s    549 | Empty       | 11 |         |    0 | 00/1153               |                                                    
  817 |  1 asmdemo.s    550 | Comment     | 11 |         |    0 | 00/1153               | * ------------------ utils ------------------
  818 |  1 asmdemo.s    551 | Empty       | 11 |         |    0 | 00/1153               |                                                    
  819 |  1 asmdemo.s    552 | Comment     | 11 |         |    0 | 00/1153               | *<sym>
  820 |  1 asmdemo.s    553 | Empty       | 11 |         |    0 | 00/1153               | testLength                                         
  821 |  1 asmdemo.s    554 | Code        | 11 |         |    3 | 00/1153 : AD BB 13    |                      lda      filelength+2         ;       Byte 3 must 0 (else file size would be > $FFFF)
  822 |  1 asmdemo.s    555 | Code        | 11 |         |    2 | 00/1156 : F0 02       |                      beq      ozunid_6             
  823 |  1 asmdemo.s    556 | Code        | 11 |         |    1 | 00/1158 : 38          |                      sec                           
  824 |  1 asmdemo.s    557 | Code        | 11 |         |    1 | 00/1159 : 60          |                      rts                           
  825 |  1 asmdemo.s    558 | Empty       | 11 |         |    0 | 00/115A               | ozunid_6                                           
  826 |  1 asmdemo.s    559 | Code        | 11 |         |    3 | 00/115A : AD BA 13    |                      lda      filelength+1         ; compare file length
  827 |  1 asmdemo.s    560 | Code        | 11 |         |    2 | 00/115D : C9 20       |                      cmp      #>{$2000}            ; to maxlen
  828 |  1 asmdemo.s    561 | Code        | 11 |         |    2 | 00/115F : D0 05       |                      bne      ozunid_7             
  829 |  1 asmdemo.s    562 | Code        | 11 |         |    3 | 00/1161 : AD B9 13    |                      lda      filelength           
  830 |  1 asmdemo.s    563 | Code        | 11 |         |    2 | 00/1164 : C9 00       |                      cmp      #<{$2000}            
  831 |  1 asmdemo.s    564 | Empty       | 11 |         |    0 | 00/1166               | ozunid_7                                           
  832 |  1 asmdemo.s    565 | Code        | 11 |         |    2 | 00/1166 : 90 04       |                      bcc      lowerlen             ; lower : OK
  833 |  1 asmdemo.s    566 | Code        | 11 |         |    2 | 00/1168 : D0 04       |                      bne      higherlen            ; higher : KO
  834 |  1 asmdemo.s    567 | Code        | 11 |         |    2 | 00/116A : F0 00       |                      beq      lowerlen             ; = : OK
  835 |  1 asmdemo.s    568 | Comment     | 11 |         |    0 | 00/116C               | *<sym>
  836 |  1 asmdemo.s    569 | Code        | 11 |         |    1 | 00/116C : 18          | lowerlen             clc                           
  837 |  1 asmdemo.s    570 | Code        | 11 |         |    1 | 00/116D : 60          |                      rts                           
  838 |  1 asmdemo.s    571 | Comment     | 11 |         |    0 | 00/116E               | *<sym>
  839 |  1 asmdemo.s    572 | Empty       | 11 |         |    0 | 00/116E               | higherlen                                          
  840 |  1 asmdemo.s    573 | Code        | 11 |         |    1 | 00/116E : 38          |                      sec                           
  841 |  1 asmdemo.s    574 | Code        | 11 |         |    1 | 00/116F : 60          |                      rts                           
  842 |  1 asmdemo.s    575 | Empty       | 11 |         |    0 | 00/1170               |                                                    
  843 |  1 asmdemo.s    576 | Comment     | 11 |         |    0 | 00/1170               | * open BMP file
  844 |  1 asmdemo.s    577 | Empty       | 11 |         |    0 | 00/1170               |                                                    
  845 |  1 asmdemo.s    578 | Comment     | 11 |         |    0 | 00/1170               | *<sym>
  846 |  1 asmdemo.s    579 | Empty       | 11 |         |    0 | 00/1170               | openBMP                                            
  847 |  1 asmdemo.s    580 | Code        | 11 |         |    3 | 00/1170 : 20 00 BF    |                      jsr      {$BF00}              ; OPEN file
  848 |  1 asmdemo.s    581 | Data        | 11 |         |    1 | 00/1173 : C8          |                      dfb      {$C8}                
  849 |  1 asmdemo.s    582 | Data        | 11 |         |    2 | 00/1174 : 91 12       |                      da       OPEN_parms           
  850 |  1 asmdemo.s    583 | Comment     | 11 |         |    0 | 00/1176               | *<bp>
  851 |  1 asmdemo.s    584 | Code        | 11 |         |    2 | 00/1176 : 90 01       |                      bcc      GetEOF               ; no error, go on
  852 |  1 asmdemo.s    585 | Code        | 11 |         |    1 | 00/1178 : 60          |                      rts                           
  853 |  1 asmdemo.s    586 | Comment     | 11 |         |    0 | 00/1179               | *<sym>
  854 |  1 asmdemo.s    587 | Empty       | 11 |         |    0 | 00/1179               | GetEOF                                             
  855 |  1 asmdemo.s    588 | Code        | 11 |         |    3 | 00/1179 : AD 96 12    |                      lda      ref                  ; get reference to file (got it in open mli call above)
  856 |  1 asmdemo.s    589 | Code        | 11 |         |    3 | 00/117C : 8D 8A 12    |                      sta      refread              ; set it for reading
  857 |  1 asmdemo.s    590 | Code        | 11 |         |    3 | 00/117F : 8D B8 13    |                      sta      refd1                ; set if for geteof
  858 |  1 asmdemo.s    591 | Empty       | 11 |         |    0 | 00/1182               |                                                    
  859 |  1 asmdemo.s    592 | Code        | 11 |         |    3 | 00/1182 : 20 00 BF    |                      jsr      {$BF00}              ; Call GetEOF to get length of file
  860 |  1 asmdemo.s    593 | Data        | 11 |         |    1 | 00/1185 : D1          |                      dfb      {$d1}                
  861 |  1 asmdemo.s    594 | Data        | 11 |         |    2 | 00/1186 : B7 13       |                      da       GET_EOF_param        
  862 |  1 asmdemo.s    595 | Code        | 11 |         |    2 | 00/1188 : 90 01       |                      bcc      geteofOK             ; if call was ok then go on
  863 |  1 asmdemo.s    596 | Code        | 11 |         |    1 | 00/118A : 60          |                      rts                           
  864 |  1 asmdemo.s    597 | Comment     | 11 |         |    0 | 00/118B               | *<sym>
  865 |  1 asmdemo.s    598 | Empty       | 11 |         |    0 | 00/118B               | geteofOK                                           
  866 |  1 asmdemo.s    599 | Code        | 11 |         |    3 | 00/118B : 20 53 11    |                      jsr      testLength           ; compare maxlen (max size for an image in memory ans size of BMP file
  867 |  1 asmdemo.s    600 | Code        | 11 |         |    2 | 00/118E : 90 01       |                      bcc      LoadBMP              ; ok if file size < max size
  868 |  1 asmdemo.s    601 | Code        | 11 |         |    1 | 00/1190 : 60          |                      rts                           
  869 |  1 asmdemo.s    602 | Empty       | 11 |         |    0 | 00/1191               |                                                    
  870 |  1 asmdemo.s    603 | Comment     | 11 |         |    0 | 00/1191               | *<sym>
  871 |  1 asmdemo.s    604 | Empty       | 11 |         |    0 | 00/1191               | LoadBMP                                            ; read BMP file
  872 |  1 asmdemo.s    605 | Code        | 11 |         |    3 | 00/1191 : AD 96 12    |                      lda      ref                  ; set reference to file (got it in open mli call above)
  873 |  1 asmdemo.s    606 | Code        | 11 |         |    3 | 00/1194 : 8D 8A 12    |                      sta      refread              
  874 |  1 asmdemo.s    607 | Code        | 11 |         |    3 | 00/1197 : 20 00 BF    |                      jsr      {$BF00}              
  875 |  1 asmdemo.s    608 | Data        | 11 |         |    1 | 00/119A : CA          |                      dfb      {$CA}                
  876 |  1 asmdemo.s    609 | Data        | 11 |         |    2 | 00/119B : 89 12       |                      da       READ_param           
  877 |  1 asmdemo.s    610 | Code        | 11 |         |    1 | 00/119D : 60          |                      rts                           
  878 |  1 asmdemo.s    611 | Empty       | 11 |         |    0 | 00/119E               |                                                    
  879 |  1 asmdemo.s    612 | Comment     | 11 |         |    0 | 00/119E               | * Clear DHGR screen   
  880 |  1 asmdemo.s    613 | Equivalence | 11 |         |    0 | 00/119E               | screenbase           equ      $2000                ; address of screen memory
  881 |  1 asmdemo.s    614 | Comment     | 11 |         |    0 | 00/119E               | *<sym> 
  882 |  1 asmdemo.s    615 | Empty       | 11 |         |    0 | 00/119E               | clerscr                                            
  883 |  1 asmdemo.s    616 | Code        | 11 |         |    2 | 00/119E : A9 00       |                      lda      #<{$2000}            
  884 |  1 asmdemo.s    617 | Code        | 11 |         |    2 | 00/11A0 : 85 06       |                      sta      {$06}                
  885 |  1 asmdemo.s    618 | Code        | 11 |         |    2 | 00/11A2 : A9 20       |                      lda      #>{$2000}+1          
  886 |  1 asmdemo.s    619 | Code        | 11 |         |    2 | 00/11A4 : 85 07       |                      sta      {$06}+1              
  887 |  1 asmdemo.s    620 | Code        | 11 |         |    2 | 00/11A6 : A0 00       |                      ldy      #0                   
  888 |  1 asmdemo.s    621 | Code        | 11 |         |    2 | 00/11A8 : A9 00       |                      lda      #0                   
  889 |  1 asmdemo.s    622 | Code        | 11 |         |    3 | 00/11AA : 8D 00 C0    |                      STA      $C000                
  890 |  1 asmdemo.s    623 | Comment     | 11 |         |    0 | 00/11AD               | *<sym> 
  891 |  1 asmdemo.s    624 | Empty       | 11 |         |    0 | 00/11AD               | clrloop                                            
  892 |  1 asmdemo.s    625 | Code        | 11 |         |    2 | 00/11AD : 91 06       |                      sta      ({$06}),y            
  893 |  1 asmdemo.s    626 | Code        | 11 |         |    3 | 00/11AF : 8D 05 C0    |                      sta      {$C005}              ; write char in aux
  894 |  1 asmdemo.s    627 | Code        | 11 |         |    2 | 00/11B2 : 91 06       |                      sta      ({$06}),y            
  895 |  1 asmdemo.s    628 | Code        | 11 |         |    3 | 00/11B4 : 8D 04 C0    |                      sta      {$C004}              
  896 |  1 asmdemo.s    629 | Code        | 11 |         |    1 | 00/11B7 : C8          |                      iny                           
  897 |  1 asmdemo.s    630 | Code        | 11 |         |    2 | 00/11B8 : D0 F3       |                      bne      clrloop              
  898 |  1 asmdemo.s    631 | Code        | 11 |         |    2 | 00/11BA : E6 07       |                      inc      {$06}+1              
  899 |  1 asmdemo.s    632 | Code        | 11 |         |    2 | 00/11BC : A6 07       |                      ldx      {$06}+1              
  900 |  1 asmdemo.s    633 | Code        | 11 |         |    2 | 00/11BE : E0 40       |                      cpx      #$40                 
  901 |  1 asmdemo.s    634 | Code        | 11 |         |    2 | 00/11C0 : D0 EB       |                      bne      clrloop              
  902 |  1 asmdemo.s    635 | Code        | 11 |         |    3 | 00/11C2 : 8D 01 C0    |                      sta      $C001                
  903 |  1 asmdemo.s    636 | Code        | 11 |         |    3 | 00/11C5 : 20 4A 11    |                      jsr      WaitForKeyPress      
  904 |  1 asmdemo.s    637 | Code        | 11 |         |    3 | 00/11C8 : 4C 37 0E    |                      jmp      startimage           
  905 |  1 asmdemo.s    638 | Code        | 11 |         |    1 | 00/11CB : 60          |                      rts                           
  906 |  1 asmdemo.s    639 | Empty       | 11 |         |    0 | 00/11CC               |                                                    
  907 |  1 asmdemo.s    640 | Comment     | 11 |         |    0 | 00/11CC               | *<sym>
  908 |  1 asmdemo.s    641 | Empty       | 11 |         |    0 | 00/11CC               | DoTextScreen                                       
  909 |  1 asmdemo.s    642 | Code        | 11 |         |    3 | 00/11CC : 8D 00 C0    |                      sta      $c000                ;80store off
  910 |  1 asmdemo.s    643 | Code        | 11 |         |    3 | 00/11CF : 8D 02 C0    |                      sta      $c002                ;RAMRD main
  911 |  1 asmdemo.s    644 | Code        | 11 |         |    3 | 00/11D2 : 8D 04 C0    |                      sta      $c004                ;RAMWRT main
  912 |  1 asmdemo.s    645 | Code        | 11 |         |    3 | 00/11D5 : 8D 0C C0    |                      sta      $c00c                ;80col off
  913 |  1 asmdemo.s    646 | Code        | 11 |         |    3 | 00/11D8 : 8D 0E C0    |                      sta      $c00e                ;Altcharset off
  914 |  1 asmdemo.s    647 | Code        | 11 |         |    3 | 00/11DB : 8D 81 C0    |                      sta      $c081                ;write RAM, read ROM (2nd 4k bank)
  915 |  1 asmdemo.s    648 | Code        | 11 |         |    3 | 00/11DE : 20 2F FB    |                      jsr      {$FB2F}              
  916 |  1 asmdemo.s    649 | Code        | 11 |         |    3 | 00/11E1 : 20 58 FC    |                      jsr      {$FC58}              
  917 |  1 asmdemo.s    650 | Code        | 11 |         |    3 | 00/11E4 : 20 84 FE    |                      jsr      {$FE84}              
  918 |  1 asmdemo.s    651 | Code        | 11 |         |    3 | 00/11E7 : 20 93 FE    |                      jsr      {$fe93}              
  919 |  1 asmdemo.s    652 | Code        | 11 |         |    3 | 00/11EA : 20 89 FE    |                      jsr      {$fe89}              
  920 |  1 asmdemo.s    653 | Code        | 11 |         |    1 | 00/11ED : 60          |                      rts                           
  921 |  1 asmdemo.s    654 | Comment     | 11 |         |    0 | 00/11EE               | *
  922 |  1 asmdemo.s    655 | Comment     | 11 |         |    0 | 00/11EE               | *<sym>
  923 |  1 asmdemo.s    656 | Empty       | 11 |         |    0 | 00/11EE               | clearbuffer                                        
  924 |  1 asmdemo.s    657 | Comment     | 11 |         |    0 | 00/11EE               | * clear memory 
  925 |  1 asmdemo.s    658 | Code        | 11 |         |    2 | 00/11EE : A9 6D       |                      lda      #<outbuff            
  926 |  1 asmdemo.s    659 | Code        | 11 |         |    2 | 00/11F0 : 85 06       |                      sta      {$06}                
  927 |  1 asmdemo.s    660 | Code        | 11 |         |    2 | 00/11F2 : A9 0F       |                      lda      #>outbuff            
  928 |  1 asmdemo.s    661 | Code        | 11 |         |    2 | 00/11F4 : 85 07       |                      sta      {$06}+1              
  929 |  1 asmdemo.s    662 | Code        | 11 |         |    2 | 00/11F6 : A9 00       |                      lda      #0                   
  930 |  1 asmdemo.s    663 | Code        | 11 |         |    2 | 00/11F8 : A0 00       |                      ldy      #0                   
  931 |  1 asmdemo.s    664 | Comment     | 11 |         |    0 | 00/11FA               | *<sym>
  932 |  1 asmdemo.s    665 | Code        | 11 |         |    2 | 00/11FA : 91 06       | pokeZ                sta      ({$06}),y            
  933 |  1 asmdemo.s    666 | Code        | 11 |         |    1 | 00/11FC : C8          |                      iny                           
  934 |  1 asmdemo.s    667 | Code        | 11 |         |    2 | 00/11FD : C0 50       |                      cpy      #80                  
  935 |  1 asmdemo.s    668 | Code        | 11 |         |    2 | 00/11FF : D0 F9       |                      bne      pokeZ                
  936 |  1 asmdemo.s    669 | Code        | 11 |         |    1 | 00/1201 : 60          |                      rts                           
  937 |  1 asmdemo.s    670 | Comment     | 11 |         |    0 | 00/1202               | *               
  938 |  1 asmdemo.s    671 | Comment     | 11 |         |    0 | 00/1202               | *<sym>
  939 |  1 asmdemo.s    672 | Empty       | 11 |         |    0 | 00/1202               | ProDOSQuit                                         
  940 |  1 asmdemo.s    673 | Code        | 11 |         |    3 | 00/1202 : 20 00 BF    |                      jsr      $BF00                ; ProDOS Quit
  941 |  1 asmdemo.s    674 | Data        | 11 |         |    1 | 00/1205 : 65          |                      dfb      $65                  
  942 |  1 asmdemo.s    675 | Data        | 11 |         |    2 | 00/1206 : 09 12       |                      dw       QuitParams           
  943 |  1 asmdemo.s    676 | Code        | 11 |         |    1 | 00/1208 : 60          |                      rts                           
  944 |  1 asmdemo.s    677 | Comment     | 11 |         |    0 | 00/1209               | *<sym>
  945 |  1 asmdemo.s    678 | Data        | 11 |         |    1 | 00/1209 : 04          | QuitParams           dfb      4                    
  946 |  1 asmdemo.s    679 | Data        | 11 |         |    8 | 00/120A : 00 00 00 00 |                      dw       0,0,0,0              ; standard parameters for Quit call
      |                     |             |    |         |      |           00 00 00 00 |
  947 |  1 asmdemo.s    680 | Comment     | 11 |         |    0 | 00/1212               | *
  948 |  1 asmdemo.s    681 | Comment     | 11 |         |    0 | 00/1212               | *<sym>
  949 |  1 asmdemo.s    682 | Empty       | 11 |         |    0 | 00/1212               | computeBytes                                       
  950 |  1 asmdemo.s    683 | Comment     | 11 |         |    0 | 00/1212               | * given the # of bits in A,X (lo,hi), computes the # of bytes
  951 |  1 asmdemo.s    684 | Comment     | 11 |         |    0 | 00/1212               | * to hold these bits on Apple II screen (7 pixels per byte)           
  952 |  1 asmdemo.s    685 | Code        | 11 |         |    3 | 00/1212 : 8D 3A 12    |                      sta      mybyte               ; number of bits (16 bits integer)
  953 |  1 asmdemo.s    686 | Code        | 11 |         |    3 | 00/1215 : 8E 3B 12    |                      stx      mybyte+1             
  954 |  1 asmdemo.s    687 | Code        | 11 |         |    2 | 00/1218 : A2 01       |                      ldx      #1                   ; x = number of needed bytes
  955 |  1 asmdemo.s    688 | Comment     | 11 |         |    0 | 00/121A               | *<sym>
  956 |  1 asmdemo.s    689 | Empty       | 11 |         |    0 | 00/121A               | loopbyte                                           
  957 |  1 asmdemo.s    690 | Code        | 11 |         |    3 | 00/121A : AD 3A 12    |                      lda      mybyte               
  958 |  1 asmdemo.s    691 | Code        | 11 |         |    1 | 00/121D : 38          |                      sec                           
  959 |  1 asmdemo.s    692 | Code        | 11 |         |    2 | 00/121E : E9 07       |                      sbc      #7                   
  960 |  1 asmdemo.s    693 | Code        | 11 |         |    3 | 00/1220 : 8D 3A 12    |                      sta      mybyte               
  961 |  1 asmdemo.s    694 | Code        | 11 |         |    3 | 00/1223 : AD 3B 12    |                      lda      mybyte+1             
  962 |  1 asmdemo.s    695 | Code        | 11 |         |    2 | 00/1226 : E9 00       |                      sbc      #0                   
  963 |  1 asmdemo.s    696 | Code        | 11 |         |    3 | 00/1228 : 8D 3B 12    |                      sta      mybyte+1             
  964 |  1 asmdemo.s    697 | Empty       | 11 |         |    0 | 00/122B               |                                                    
  965 |  1 asmdemo.s    698 | Code        | 11 |         |    3 | 00/122B : 0D 3A 12    |                      ora      mybyte               
  966 |  1 asmdemo.s    699 | Code        | 11 |         |    2 | 00/122E : F0 09       |                      beq      ozunid_8             ; = 0 : exit, nb_byte is correct
  967 |  1 asmdemo.s    700 | Code        | 11 |         |    3 | 00/1230 : AD 3B 12    |                      lda      mybyte+1             
  968 |  1 asmdemo.s    701 | Code        | 11 |         |    2 | 00/1233 : 30 04       |                      bmi      ozunid_8             ; < 0 : exit, nb_byte is correct
  969 |  1 asmdemo.s    702 | Comment     | 11 |         |    0 | 00/1235               |                                         ; > 0 : loop
  970 |  1 asmdemo.s    703 | Code        | 11 |         |    1 | 00/1235 : E8          |                      inx                           
  971 |  1 asmdemo.s    704 | Code        | 11 |         |    3 | 00/1236 : 4C 1A 12    |                      jmp      loopbyte             
  972 |  1 asmdemo.s    705 | Empty       | 11 |         |    0 | 00/1239               | ozunid_8                                           
  973 |  1 asmdemo.s    706 | Code        | 11 |         |    1 | 00/1239 : 60          |                      rts                           
  974 |  1 asmdemo.s    707 | Comment     | 11 |         |    0 | 00/123A               | *<sym>
  975 |  1 asmdemo.s    708 | Empty       | 11 |         |    0 | 00/123A               | mybyte                                             
  976 |  1 asmdemo.s    709 | Data        | 11 |         |    2 | 00/123A : 00 00       |                      ds       2                    
  977 |  1 asmdemo.s    710 | Comment     | 11 |         |    0 | 00/123C               | *
  978 |  1 asmdemo.s    711 | Comment     | 11 |         |    0 | 00/123C               | *
  979 |  1 asmdemo.s    712 | Comment     | 11 |         |    0 | 00/123C               | *********** PREFIX *************
  980 |  1 asmdemo.s    713 | Comment     | 11 |         |    0 | 00/123C               | * Set prefix using current préfix :
  981 |  1 asmdemo.s    714 | Comment     | 11 |         |    0 | 00/123C               | * Call GETPREFIX, put it in "path" string
  982 |  1 asmdemo.s    715 | Comment     | 11 |         |    0 | 00/123C               | * If no prefix (i.e. length of "path" string = 0),
  983 |  1 asmdemo.s    716 | Comment     | 11 |         |    0 | 00/123C               | * then get préfix from last used disk, unsing ONLINE call
  984 |  1 asmdemo.s    717 | Comment     | 11 |         |    0 | 00/123C               | * If any error, exit with carry set
  985 |  1 asmdemo.s    718 | Comment     | 11 |         |    0 | 00/123C               | * else exit with carry clear
  986 |  1 asmdemo.s    719 | Comment     | 11 |         |    0 | 00/123C               | *
  987 |  1 asmdemo.s    720 | Comment     | 11 |         |    0 | 00/123C               | *<sym>
  988 |  1 asmdemo.s    721 | Empty       | 11 |         |    0 | 00/123C               | doprefix                                           
  989 |  1 asmdemo.s    722 | Code        | 11 |         |    3 | 00/123C : 20 00 BF    |                      jsr      {$BF00}              ; getprefix MLI call ; put prefix in "path"
  990 |  1 asmdemo.s    723 | Data        | 11 |         |    1 | 00/123F : C7          |                      dfb      {$c7}                
  991 |  1 asmdemo.s    724 | Data        | 11 |         |    2 | 00/1240 : 9B 12       |                      da       GET_PREFIX_param     
  992 |  1 asmdemo.s    725 | Code        | 11 |         |    2 | 00/1242 : 90 01       |                      bcc      gpOk                 
  993 |  1 asmdemo.s    726 | Code        | 11 |         |    1 | 00/1244 : 60          |                      rts                           
  994 |  1 asmdemo.s    727 | Comment     | 11 |         |    0 | 00/1245               | *<sym>
  995 |  1 asmdemo.s    728 | Empty       | 11 |         |    0 | 00/1245               | gpOk                                               
  996 |  1 asmdemo.s    729 | Code        | 11 |         |    3 | 00/1245 : AD A5 12    |                      lda      path                 ; first char = length
  997 |  1 asmdemo.s    730 | Code        | 11 |         |    2 | 00/1248 : F0 03       |                      beq      noprefix             ; if length = 0 => no prefix
  998 |  1 asmdemo.s    731 | Code        | 11 |         |    3 | 00/124A : 4C 88 12    |                      jmp      prefixSetOK          ; else prefix already set, exit
  999 |  1 asmdemo.s    732 | Comment     | 11 |         |    0 | 00/124D               | *<sym>
 1000 |  1 asmdemo.s    733 | Empty       | 11 |         |    0 | 00/124D               | noprefix                                           
 1001 |  1 asmdemo.s    734 | Code        | 11 |         |    3 | 00/124D : AD 30 BF    |                      lda      {$BF30}              ; last used slot/drive
 1002 |  1 asmdemo.s    735 | Code        | 11 |         |    3 | 00/1250 : 8D A2 12    |                      sta      unit                 ; param du mli online
 1003 |  1 asmdemo.s    736 | Code        | 11 |         |    3 | 00/1253 : 20 00 BF    |                      jsr      {$BF00}              
 1004 |  1 asmdemo.s    737 | Data        | 11 |         |    1 | 00/1256 : C5          |                      dfb      {$C5}                ; on_line : get prefix in path
 1005 |  1 asmdemo.s    738 | Data        | 11 |         |    2 | 00/1257 : A1 12       |                      da       ONLINE_param         
 1006 |  1 asmdemo.s    739 | Code        | 11 |         |    2 | 00/1259 : 90 01       |                      bcc      onlineOK             
 1007 |  1 asmdemo.s    740 | Code        | 11 |         |    1 | 00/125B : 60          |                      rts                           
 1008 |  1 asmdemo.s    741 | Comment     | 11 |         |    0 | 00/125C               | *<sym>
 1009 |  1 asmdemo.s    742 | Empty       | 11 |         |    0 | 00/125C               | onlineOK                                           
 1010 |  1 asmdemo.s    743 | Code        | 11 |         |    3 | 00/125C : AD A5 12    |                      lda      path                 
 1011 |  1 asmdemo.s    744 | Code        | 11 |         |    2 | 00/125F : 29 0F       |                      and      #$0f                 ; length in low nibble
 1012 |  1 asmdemo.s    745 | Code        | 11 |         |    3 | 00/1261 : 8D A5 12    |                      sta      path                 
 1013 |  1 asmdemo.s    746 | Code        | 11 |         |    1 | 00/1264 : AA          |                      tax                           
 1014 |  1 asmdemo.s    747 | Comment     | 11 |         |    0 | 00/1265               | *<sym>
 1015 |  1 asmdemo.s    748 | Code        | 11 |         |    3 | 00/1265 : BD A5 12    | ozunid_9             lda      path,x               ; shift prefix by one byte
 1016 |  1 asmdemo.s    749 | Code        | 11 |         |    3 | 00/1268 : 9D A6 12    |                      sta      path+1,x             ;
 1017 |  1 asmdemo.s    750 | Code        | 11 |         |    1 | 00/126B : CA          |                      dex                           
 1018 |  1 asmdemo.s    751 | Code        | 11 |         |    2 | 00/126C : D0 F7       |                      bne      ozunid_9             ; all string
 1019 |  1 asmdemo.s    752 | Code        | 11 |         |    3 | 00/126E : EE A5 12    |                      inc      path                 
 1020 |  1 asmdemo.s    753 | Code        | 11 |         |    3 | 00/1271 : EE A5 12    |                      inc      path                 ; length = length + 2
 1021 |  1 asmdemo.s    754 | Code        | 11 |         |    3 | 00/1274 : AE A5 12    |                      ldx      path                 ;
 1022 |  1 asmdemo.s    755 | Code        | 11 |         |    2 | 00/1277 : A9 AF       |                      lda      #$af                 ; = '/'
 1023 |  1 asmdemo.s    756 | Code        | 11 |         |    3 | 00/1279 : 9D A5 12    |                      sta      path,x               ; insert '/'' at the end
 1024 |  1 asmdemo.s    757 | Code        | 11 |         |    3 | 00/127C : 8D A6 12    |                      sta      path+1               ; and '/'' at the beginning
 1025 |  1 asmdemo.s    758 | Empty       | 11 |         |    0 | 00/127F               |                                                    
 1026 |  1 asmdemo.s    759 | Code        | 11 |         |    3 | 00/127F : 20 00 BF    |                      jsr      {$BF00}              ; set_prefix (in the form : /prefix/)
 1027 |  1 asmdemo.s    760 | Data        | 11 |         |    1 | 00/1282 : C6          |                      dfb      {$c6}                
 1028 |  1 asmdemo.s    761 | Data        | 11 |         |    2 | 00/1283 : 9E 12       |                      da       SET_PREFIX_param     
 1029 |  1 asmdemo.s    762 | Code        | 11 |         |    2 | 00/1285 : 90 01       |                      bcc      prefixSetOK          
 1030 |  1 asmdemo.s    763 | Code        | 11 |         |    1 | 00/1287 : 60          |                      rts                           
 1031 |  1 asmdemo.s    764 | Comment     | 11 |         |    0 | 00/1288               | *<sym>
 1032 |  1 asmdemo.s    765 | Empty       | 11 |         |    0 | 00/1288               | prefixSetOK                                        
 1033 |  1 asmdemo.s    766 | Code        | 11 |         |    1 | 00/1288 : 60          |                      rts                           
 1034 |  1 asmdemo.s    767 | Comment     | 11 |         |    0 | 00/1289               | *
 1035 |  1 asmdemo.s    768 | Comment     | 11 |         |    0 | 00/1289               | *
 1036 |  1 asmdemo.s    769 | Comment     | 11 |         |    0 | 00/1289               | * * * * MLI Call READ parameters * * * * 
 1037 |  1 asmdemo.s    770 | Comment     | 11 |         |    0 | 00/1289               | *<sym>
 1038 |  1 asmdemo.s    771 | Empty       | 11 |         |    0 | 00/1289               | READ_param                                         ; READ file
 1039 |  1 asmdemo.s    772 | Data        | 11 |         |    1 | 00/1289 : 04          |                      hex      04                   ; number of params.
 1040 |  1 asmdemo.s    773 | Comment     | 11 |         |    0 | 00/128A               | *<sym>
 1041 |  1 asmdemo.s    774 | Data        | 11 |         |    1 | 00/128A : 00          | refread              hex      00                   ; ref #
 1042 |  1 asmdemo.s    775 | Comment     | 11 |         |    0 | 00/128B               | *<sym>
 1043 |  1 asmdemo.s    776 | Data        | 11 |         |    2 | 00/128B : 00 60       | rdbuffa              da       {$6000}              
 1044 |  1 asmdemo.s    777 | Comment     | 11 |         |    0 | 00/128D               | *<sym>
 1045 |  1 asmdemo.s    778 | Data        | 11 |         |    2 | 00/128D : 00 20       | rreq                 hex      0020                 ; bytes requested
 1046 |  1 asmdemo.s    779 | Comment     | 11 |         |    0 | 00/128F               | *<sym>
 1047 |  1 asmdemo.s    780 | Data        | 11 |         |    2 | 00/128F : 00 00       | readlen              hex      0000                 ; bytes read
 1048 |  1 asmdemo.s    781 | Comment     | 11 |         |    0 | 00/1291               | *
 1049 |  1 asmdemo.s    782 | Comment     | 11 |         |    0 | 00/1291               | * * * * MLI Call OPEN parameters * * * * 
 1050 |  1 asmdemo.s    783 | Comment     | 11 |         |    0 | 00/1291               | *<sym>
 1051 |  1 asmdemo.s    784 | Empty       | 11 |         |    0 | 00/1291               | OPEN_parms                                         ; OPEN file for reading
 1052 |  1 asmdemo.s    785 | Data        | 11 |         |    1 | 00/1291 : 03          |                      hex      03                   ; number of params.
 1053 |  1 asmdemo.s    786 | Data        | 11 |         |    2 | 00/1292 : 97 12       |                      da       fname                ; path name
 1054 |  1 asmdemo.s    787 | Comment     | 11 |         |    0 | 00/1294               | *<sym>
 1055 |  1 asmdemo.s    788 | Data        | 11 |         |    2 | 00/1294 : 00 00       | fbuff                hex      0000                 
 1056 |  1 asmdemo.s    789 | Comment     | 11 |         |    0 | 00/1296               | *<sym>
 1057 |  1 asmdemo.s    790 | Data        | 11 |         |    1 | 00/1296 : 00          | ref                  hex      00                   
 1058 |  1 asmdemo.s    791 | Comment     | 11 |         |    0 | 00/1297               | *<sym>
 1059 |  1 asmdemo.s    792 | Data        | 11 |         |    4 | 00/1297 : 03 49 4D 47 | fname                str      'IMG'                
 1060 |  1 asmdemo.s    793 | Comment     | 11 |         |    0 | 00/129B               | *
 1061 |  1 asmdemo.s    794 | Comment     | 11 |         |    0 | 00/129B               | * * * * MLI Call GET_PREFIX parameters * * * * 
 1062 |  1 asmdemo.s    795 | Comment     | 11 |         |    0 | 00/129B               | *<sym>
 1063 |  1 asmdemo.s    796 | Empty       | 11 |         |    0 | 00/129B               | GET_PREFIX_param                                   ; GET_PREFIX
 1064 |  1 asmdemo.s    797 | Data        | 11 |         |    1 | 00/129B : 01          |                      hex      01                   ; number of params.
 1065 |  1 asmdemo.s    798 | Data        | 11 |         |    2 | 00/129C : A5 12       |                      da       path                 
 1066 |  1 asmdemo.s    799 | Empty       | 11 |         |    0 | 00/129E               |                                                    
 1067 |  1 asmdemo.s    800 | Comment     | 11 |         |    0 | 00/129E               | *
 1068 |  1 asmdemo.s    801 | Comment     | 11 |         |    0 | 00/129E               | * * * * MLI Call SET_PREFIX parameters * * * *
 1069 |  1 asmdemo.s    802 | Comment     | 11 |         |    0 | 00/129E               | *<sym>
 1070 |  1 asmdemo.s    803 | Empty       | 11 |         |    0 | 00/129E               | SET_PREFIX_param                                   ; SET_PREFIX
 1071 |  1 asmdemo.s    804 | Data        | 11 |         |    1 | 00/129E : 01          |                      hex      01                   ; number of params.
 1072 |  1 asmdemo.s    805 | Data        | 11 |         |    2 | 00/129F : A5 12       |                      da       path                 
 1073 |  1 asmdemo.s    806 | Comment     | 11 |         |    0 | 00/12A1               | *
 1074 |  1 asmdemo.s    807 | Comment     | 11 |         |    0 | 00/12A1               | *
 1075 |  1 asmdemo.s    808 | Comment     | 11 |         |    0 | 00/12A1               | * * * * MLI Call ONLINE parameters * * * *
 1076 |  1 asmdemo.s    809 | Comment     | 11 |         |    0 | 00/12A1               | *<sym>
 1077 |  1 asmdemo.s    810 | Empty       | 11 |         |    0 | 00/12A1               | ONLINE_param                                       ; ONLINE
 1078 |  1 asmdemo.s    811 | Data        | 11 |         |    1 | 00/12A1 : 02          |                      hex      02                   ; number of params.
 1079 |  1 asmdemo.s    812 | Comment     | 11 |         |    0 | 00/12A2               | *<sym>
 1080 |  1 asmdemo.s    813 | Data        | 11 |         |    1 | 00/12A2 : 00          | unit                 hex      00                   
 1081 |  1 asmdemo.s    814 | Data        | 11 |         |    2 | 00/12A3 : A5 12       |                      da       path                 
 1082 |  1 asmdemo.s    815 | Comment     | 11 |         |    0 | 00/12A5               | *
 1083 |  1 asmdemo.s    816 | Comment     | 11 |         |    0 | 00/12A5               | *<sym>
 1084 |  1 asmdemo.s    817 | Data        | 11 |         |  256 | 00/12A5 : 00 00 00 00 | path                 ds       256                  ; storage for path
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
      |                     |             |    |         |      |           00 00 00 00 |
 1085 |  1 asmdemo.s    818 | Comment     | 11 |         |    0 | 00/13A5               | *
 1086 |  1 asmdemo.s    819 | Comment     | 11 |         |    0 | 00/13A5               | * * * * MLI Call GET_FILE_INFO parameters * * * *
 1087 |  1 asmdemo.s    820 | Comment     | 11 |         |    0 | 00/13A5               | *<sym>
 1088 |  1 asmdemo.s    821 | Empty       | 11 |         |    0 | 00/13A5               | GET_FILE_INFO_param                                ; GET_FILE_INFO
 1089 |  1 asmdemo.s    822 | Data        | 11 |         |    1 | 00/13A5 : 0A          |                      hex      0A                   
 1090 |  1 asmdemo.s    823 | Data        | 11 |         |    2 | 00/13A6 : A5 12       |                      da       path                 
 1091 |  1 asmdemo.s    824 | Comment     | 11 |         |    0 | 00/13A8               | *<sym>
 1092 |  1 asmdemo.s    825 | Data        | 11 |         |    1 | 00/13A8 : 00          | access               hex      00                   
 1093 |  1 asmdemo.s    826 | Comment     | 11 |         |    0 | 00/13A9               | *<sym>
 1094 |  1 asmdemo.s    827 | Data        | 11 |         |    1 | 00/13A9 : 00          | ftype                hex      00                   
 1095 |  1 asmdemo.s    828 | Comment     | 11 |         |    0 | 00/13AA               | *<sym>
 1096 |  1 asmdemo.s    829 | Data        | 11 |         |    2 | 00/13AA : 00 00       | auxtype              hex      0000                 
 1097 |  1 asmdemo.s    830 | Comment     | 11 |         |    0 | 00/13AC               | *<sym>
 1098 |  1 asmdemo.s    831 | Data        | 11 |         |    1 | 00/13AC : 00          | stotype              hex      00                   
 1099 |  1 asmdemo.s    832 | Comment     | 11 |         |    0 | 00/13AD               | *<sym>
 1100 |  1 asmdemo.s    833 | Data        | 11 |         |    2 | 00/13AD : 00 00       | blocks               hex      0000                 
 1101 |  1 asmdemo.s    834 | Comment     | 11 |         |    0 | 00/13AF               | *<sym>
 1102 |  1 asmdemo.s    835 | Data        | 11 |         |    2 | 00/13AF : 00 00       | date                 hex      0000                 
 1103 |  1 asmdemo.s    836 | Comment     | 11 |         |    0 | 00/13B1               | *<sym>
 1104 |  1 asmdemo.s    837 | Data        | 11 |         |    2 | 00/13B1 : 00 00       | time                 hex      0000                 
 1105 |  1 asmdemo.s    838 | Data        | 11 |         |    2 | 00/13B3 : 00 00       | cdate                hex      0000                 
 1106 |  1 asmdemo.s    839 | Data        | 11 |         |    2 | 00/13B5 : 00 00       | ctime                hex      0000                 
 1107 |  1 asmdemo.s    840 | Comment     | 11 |         |    0 | 00/13B7               | *
 1108 |  1 asmdemo.s    841 | Comment     | 11 |         |    0 | 00/13B7               | * * * * MLI Call GET_EOF parameters * * * *
 1109 |  1 asmdemo.s    842 | Comment     | 11 |         |    0 | 00/13B7               | *<sym>
 1110 |  1 asmdemo.s    843 | Empty       | 11 |         |    0 | 00/13B7               | GET_EOF_param                                      ; GET_EOF
 1111 |  1 asmdemo.s    844 | Data        | 11 |         |    1 | 00/13B7 : 02          |                      hex      02                   
 1112 |  1 asmdemo.s    845 | Comment     | 11 |         |    0 | 00/13B8               | *<sym>
 1113 |  1 asmdemo.s    846 | Data        | 11 |         |    1 | 00/13B8 : 00          | refd1                hex      00                   
 1114 |  1 asmdemo.s    847 | Comment     | 11 |         |    0 | 00/13B9               | *<sym>
 1115 |  1 asmdemo.s    848 | Data        | 11 |         |    3 | 00/13B9 : 00 00 00    | filelength           ds       3                    
------+---------------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
